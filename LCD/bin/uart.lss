
bin/uart.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__isr_vector>:
   0:	10002000 	.word	0x10002000
   4:	000000c1 	.word	0x000000c1
   8:	000000e1 	.word	0x000000e1
   c:	000000e3 	.word	0x000000e3
	...
  2c:	000000e5 	.word	0x000000e5
	...
  38:	000000e7 	.word	0x000000e7
  3c:	00000235 	.word	0x00000235
  40:	000000eb 	.word	0x000000eb
  44:	000000eb 	.word	0x000000eb
  48:	000000eb 	.word	0x000000eb
  4c:	000000eb 	.word	0x000000eb
  50:	000000eb 	.word	0x000000eb
  54:	000000eb 	.word	0x000000eb
  58:	000000eb 	.word	0x000000eb
  5c:	000000eb 	.word	0x000000eb
  60:	000000eb 	.word	0x000000eb
  64:	000000eb 	.word	0x000000eb
  68:	000000eb 	.word	0x000000eb
  6c:	000000eb 	.word	0x000000eb
  70:	000000eb 	.word	0x000000eb
  74:	000000eb 	.word	0x000000eb
  78:	000000eb 	.word	0x000000eb
  7c:	000000eb 	.word	0x000000eb
  80:	000000eb 	.word	0x000000eb
  84:	000000eb 	.word	0x000000eb
  88:	000000eb 	.word	0x000000eb
  8c:	000000eb 	.word	0x000000eb
  90:	000000eb 	.word	0x000000eb
  94:	000000eb 	.word	0x000000eb
	...
  a0:	000000eb 	.word	0x000000eb
  a4:	000000eb 	.word	0x000000eb
  a8:	000000eb 	.word	0x000000eb
  ac:	00000000 	.word	0x00000000
  b0:	000000eb 	.word	0x000000eb
  b4:	000000eb 	.word	0x000000eb
  b8:	000000eb 	.word	0x000000eb
  bc:	000000eb 	.word	0x000000eb

000000c0 <Reset_Handler>:
 *    __bss_start__: start of the BSS section.
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
    ldr r1, =__bss_start__
  c0:	4905      	ldr	r1, [pc, #20]	; (d8 <Reset_Handler+0x18>)
    ldr r2, =__bss_end__
  c2:	4a06      	ldr	r2, [pc, #24]	; (dc <Reset_Handler+0x1c>)

    movs    r0, #0
  c4:	2000      	movs	r0, #0

    sub    r2, r1
  c6:	1a52      	subs	r2, r2, r1
    ble .L_loop3_done
  c8:	dd02      	ble.n	d0 <Reset_Handler+0x10>

.L_loop3:
    sub    r2, #4
  ca:	3a04      	subs	r2, #4
    str r0, [r1, r2]
  cc:	5088      	str	r0, [r1, r2]
    bgt .L_loop3
  ce:	dcfc      	bgt.n	ca <Reset_Handler+0xa>
.L_loop3_done:
#endif /* __STARTUP_CLEAR_BSS */


#ifndef __NO_SYSTEM_INIT
    bl  SystemInit
  d0:	f000 fa3e 	bl	550 <SystemInit>
#endif

#ifndef __START
#define __START _start
#endif
    bl  __START
  d4:	f000 fa08 	bl	4e8 <main>
    ldr r1, =__bss_start__
  d8:	10000104 	.word	0x10000104
    ldr r2, =__bss_end__
  dc:	10000110 	.word	0x10000110

000000e0 <NMI_Handler>:
/* Exception Handlers */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
  e0:	e7fe      	b.n	e0 <NMI_Handler>

000000e2 <HardFault_Handler>:
    .size   NMI_Handler, . - NMI_Handler

    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
  e2:	e7fe      	b.n	e2 <HardFault_Handler>

000000e4 <SVC_Handler>:
    .size   HardFault_Handler, . - HardFault_Handler

    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
  e4:	e7fe      	b.n	e4 <SVC_Handler>

000000e6 <PendSV_Handler>:
    .size   SVC_Handler, . - SVC_Handler

    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
  e6:	e7fe      	b.n	e6 <PendSV_Handler>
    .size   PendSV_Handler, . - PendSV_Handler

    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
  e8:	e7fe      	b.n	e8 <PendSV_Handler+0x2>

000000ea <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
  ea:	e7fe      	b.n	ea <Default_Handler>

000000ec <SystemCoreClockUpdate>:
 ****************************************************************************/

/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
  ec:	b510      	push	{r4, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetSystemClockRate();
  ee:	f000 f867 	bl	1c0 <Chip_Clock_GetSystemClockRate>
  f2:	4b01      	ldr	r3, [pc, #4]	; (f8 <SystemCoreClockUpdate+0xc>)
  f4:	6018      	str	r0, [r3, #0]
}
  f6:	bd10      	pop	{r4, pc}
  f8:	10000100 	.word	0x10000100

000000fc <Chip_GPIO_Init>:
 * @param	clk	: Clock to enable
 * @return	Nothing
 */
STATIC INLINE void Chip_Clock_EnablePeriphClock(CHIP_SYSCTL_CLOCK_T clk)
{
	LPC_SYSCTL->SYSAHBCLKCTRL |= (1 << clk);
  fc:	2280      	movs	r2, #128	; 0x80
  fe:	2040      	movs	r0, #64	; 0x40
 100:	4902      	ldr	r1, [pc, #8]	; (10c <Chip_GPIO_Init+0x10>)
 102:	588b      	ldr	r3, [r1, r2]
 104:	4303      	orrs	r3, r0
 106:	508b      	str	r3, [r1, r2]
/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
	UNUSED(pGPIO);
	Chip_Clock_EnablePeriphClock(SYSCTL_CLOCK_GPIO);
}
 108:	4770      	bx	lr
 10a:	46c0      	nop			; (mov r8, r8)
 10c:	40048000 	.word	0x40048000

00000110 <Chip_GPIO_WriteDirBit>:

/* Set GPIO direction */
void Chip_GPIO_WriteDirBit(LPC_GPIO_T *pGPIO, uint32_t port, uint8_t bit, bool setting)
{
	if (setting) {
		pGPIO[port].DIR |= 1UL << bit;
 110:	0409      	lsls	r1, r1, #16
{
 112:	b510      	push	{r4, lr}
		pGPIO[port].DIR |= 1UL << bit;
 114:	1840      	adds	r0, r0, r1
	if (setting) {
 116:	2b00      	cmp	r3, #0
 118:	d107      	bne.n	12a <Chip_GPIO_WriteDirBit+0x1a>
	}
	else {
		pGPIO[port].DIR &= ~(1UL << bit);
 11a:	2101      	movs	r1, #1
 11c:	2480      	movs	r4, #128	; 0x80
 11e:	4091      	lsls	r1, r2
 120:	0224      	lsls	r4, r4, #8
 122:	5903      	ldr	r3, [r0, r4]
 124:	438b      	bics	r3, r1
 126:	5103      	str	r3, [r0, r4]
	}
}
 128:	bd10      	pop	{r4, pc}
		pGPIO[port].DIR |= 1UL << bit;
 12a:	2301      	movs	r3, #1
 12c:	2180      	movs	r1, #128	; 0x80
 12e:	4093      	lsls	r3, r2
 130:	0209      	lsls	r1, r1, #8
 132:	5844      	ldr	r4, [r0, r1]
 134:	4323      	orrs	r3, r4
 136:	5043      	str	r3, [r0, r1]
 138:	e7f6      	b.n	128 <Chip_GPIO_WriteDirBit+0x18>
 13a:	46c0      	nop			; (mov r8, r8)

0000013c <Chip_Clock_GetMainClockRate>:
/* Return main clock rate */
uint32_t Chip_Clock_GetMainClockRate(void)
{
	uint32_t clkRate = 0;

	switch ((CHIP_SYSCTL_MAINCLKSRC_T) (LPC_SYSCTL->MAINCLKSEL & 0x3)) {
 13c:	2103      	movs	r1, #3
{
 13e:	b500      	push	{lr}
	switch ((CHIP_SYSCTL_MAINCLKSRC_T) (LPC_SYSCTL->MAINCLKSEL & 0x3)) {
 140:	4a1b      	ldr	r2, [pc, #108]	; (1b0 <Chip_Clock_GetMainClockRate+0x74>)
{
 142:	b083      	sub	sp, #12
	switch ((CHIP_SYSCTL_MAINCLKSRC_T) (LPC_SYSCTL->MAINCLKSEL & 0x3)) {
 144:	6f13      	ldr	r3, [r2, #112]	; 0x70
 146:	400b      	ands	r3, r1
 148:	2b02      	cmp	r3, #2
 14a:	d01c      	beq.n	186 <Chip_Clock_GetMainClockRate+0x4a>
 14c:	2b03      	cmp	r3, #3
 14e:	d00c      	beq.n	16a <Chip_Clock_GetMainClockRate+0x2e>
 150:	2b01      	cmp	r3, #1
 152:	d002      	beq.n	15a <Chip_Clock_GetMainClockRate+0x1e>
	case SYSCTL_MAINCLKSRC_IRC:
		clkRate = Chip_Clock_GetIntOscRate();
 154:	4817      	ldr	r0, [pc, #92]	; (1b4 <Chip_Clock_GetMainClockRate+0x78>)
		clkRate = Chip_Clock_GetSystemPLLOutClockRate();
		break;
	}

	return clkRate;
}
 156:	b003      	add	sp, #12
 158:	bd00      	pop	{pc}
	switch ((CHIP_SYSCTL_PLLCLKSRC_T) (LPC_SYSCTL->SYSPLLCLKSEL & 0x3)) {
 15a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 15c:	4019      	ands	r1, r3
 15e:	d0f9      	beq.n	154 <Chip_Clock_GetMainClockRate+0x18>
 160:	2901      	cmp	r1, #1
 162:	d123      	bne.n	1ac <Chip_Clock_GetMainClockRate+0x70>
 * @brief	Returns the main oscillator clock rate
 * @return	main oscillator clock rate
 */
STATIC INLINE uint32_t Chip_Clock_GetMainOscRate(void)
{
	return OscRateIn;
 164:	4b14      	ldr	r3, [pc, #80]	; (1b8 <Chip_Clock_GetMainClockRate+0x7c>)
 166:	6818      	ldr	r0, [r3, #0]
 168:	e7f5      	b.n	156 <Chip_Clock_GetMainClockRate+0x1a>
	return Chip_Clock_GetPLLFreq(LPC_SYSCTL->SYSPLLCTRL,
 16a:	6891      	ldr	r1, [r2, #8]
	switch ((CHIP_SYSCTL_PLLCLKSRC_T) (LPC_SYSCTL->SYSPLLCLKSEL & 0x3)) {
 16c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 16e:	4013      	ands	r3, r2
 170:	d016      	beq.n	1a0 <Chip_Clock_GetMainClockRate+0x64>
 172:	2b01      	cmp	r3, #1
 174:	d11a      	bne.n	1ac <Chip_Clock_GetMainClockRate+0x70>
 176:	201f      	movs	r0, #31
 178:	4b0f      	ldr	r3, [pc, #60]	; (1b8 <Chip_Clock_GetMainClockRate+0x7c>)
 17a:	4008      	ands	r0, r1
 17c:	681b      	ldr	r3, [r3, #0]
 17e:	3001      	adds	r0, #1
 180:	9301      	str	r3, [sp, #4]
 182:	4358      	muls	r0, r3
 184:	e7e7      	b.n	156 <Chip_Clock_GetMainClockRate+0x1a>
	div = reg & 0x1F;
 186:	211f      	movs	r1, #31
	return Chip_Clock_GetWDTLFORate(LPC_SYSCTL->WDTOSCCTRL);
 188:	6a52      	ldr	r2, [r2, #36]	; 0x24
	clk = (CHIP_WDTLFO_OSC_T) ((reg >> 5) & 0xF);
 18a:	05d3      	lsls	r3, r2, #23
	div = reg & 0x1F;
 18c:	4011      	ands	r1, r2
	return wdtOSCRate[clk] / ((div + 1) << 1);
 18e:	0f1b      	lsrs	r3, r3, #28
 190:	4a0a      	ldr	r2, [pc, #40]	; (1bc <Chip_Clock_GetMainClockRate+0x80>)
 192:	009b      	lsls	r3, r3, #2
 194:	3101      	adds	r1, #1
 196:	0049      	lsls	r1, r1, #1
 198:	5898      	ldr	r0, [r3, r2]
 19a:	f000 f9fb 	bl	594 <__udivsi3>
		break;
 19e:	e7da      	b.n	156 <Chip_Clock_GetMainClockRate+0x1a>
 1a0:	231f      	movs	r3, #31
 1a2:	4804      	ldr	r0, [pc, #16]	; (1b4 <Chip_Clock_GetMainClockRate+0x78>)
 1a4:	400b      	ands	r3, r1
 1a6:	3301      	adds	r3, #1
 1a8:	4358      	muls	r0, r3
 1aa:	e7d4      	b.n	156 <Chip_Clock_GetMainClockRate+0x1a>
		clkRate = 0;
 1ac:	2000      	movs	r0, #0
	return clkRate;
 1ae:	e7d2      	b.n	156 <Chip_Clock_GetMainClockRate+0x1a>
 1b0:	40048000 	.word	0x40048000
 1b4:	00b71b00 	.word	0x00b71b00
 1b8:	000006ec 	.word	0x000006ec
 1bc:	000006ac 	.word	0x000006ac

000001c0 <Chip_Clock_GetSystemClockRate>:

/* Return system clock rate */
uint32_t Chip_Clock_GetSystemClockRate(void)
{
 1c0:	b510      	push	{r4, lr}
	/* No point in checking for divide by 0 */
	return Chip_Clock_GetMainClockRate() / LPC_SYSCTL->SYSAHBCLKDIV;
 1c2:	f7ff ffbb 	bl	13c <Chip_Clock_GetMainClockRate>
 1c6:	4b02      	ldr	r3, [pc, #8]	; (1d0 <Chip_Clock_GetSystemClockRate+0x10>)
 1c8:	6f99      	ldr	r1, [r3, #120]	; 0x78
 1ca:	f000 f9e3 	bl	594 <__udivsi3>
}
 1ce:	bd10      	pop	{r4, pc}
 1d0:	40048000 	.word	0x40048000

000001d4 <Chip_UART_Init>:
	LPC_SYSCTL->SYSAHBCLKCTRL |= (1 << clk);
 1d4:	2180      	movs	r1, #128	; 0x80
 1d6:	2280      	movs	r2, #128	; 0x80
 1d8:	4b07      	ldr	r3, [pc, #28]	; (1f8 <Chip_UART_Init+0x24>)
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
 1da:	b510      	push	{r4, lr}
 1dc:	585c      	ldr	r4, [r3, r1]
 1de:	0152      	lsls	r2, r2, #5
 1e0:	4322      	orrs	r2, r4
 1e2:	505a      	str	r2, [r3, r1]
	LPC_SYSCTL->USARTCLKDIV  = div;
 1e4:	2298      	movs	r2, #152	; 0x98
 1e6:	397f      	subs	r1, #127	; 0x7f
 1e8:	5099      	str	r1, [r3, r2]
 *			with a RX trip level of 8 characters, use something like
 *			(UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
	pUART->FCR = fcr;
 1ea:	2307      	movs	r3, #7
 1ec:	6083      	str	r3, [r0, #8]
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
 1ee:	3b04      	subs	r3, #4
 1f0:	60c3      	str	r3, [r0, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
 1f2:	330d      	adds	r3, #13
 1f4:	6283      	str	r3, [r0, #40]	; 0x28
}
 1f6:	bd10      	pop	{r4, pc}
 1f8:	40048000 	.word	0x40048000

000001fc <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
 1fc:	b570      	push	{r4, r5, r6, lr}
 1fe:	000e      	movs	r6, r1
 200:	0004      	movs	r4, r0
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetMainClockRate();
 202:	f7ff ff9b 	bl	13c <Chip_Clock_GetMainClockRate>
	div = clkin / (baudrate * 16);
 206:	0131      	lsls	r1, r6, #4
	clkin = Chip_Clock_GetMainClockRate();
 208:	0005      	movs	r5, r0
	div = clkin / (baudrate * 16);
 20a:	f000 f9c3 	bl	594 <__udivsi3>
 20e:	23ff      	movs	r3, #255	; 0xff
 210:	001e      	movs	r6, r3
 212:	0001      	movs	r1, r0
 214:	4006      	ands	r6, r0
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
 216:	2080      	movs	r0, #128	; 0x80
 218:	68e2      	ldr	r2, [r4, #12]
 21a:	4302      	orrs	r2, r0
 21c:	60e2      	str	r2, [r4, #12]

	/* High and low halves of the divider */
	divh = div / 256;
 21e:	0a0a      	lsrs	r2, r1, #8
 220:	4013      	ands	r3, r2
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
 222:	6026      	str	r6, [r4, #0]
	pUART->DLM = (uint32_t) dlm;
 224:	6063      	str	r3, [r4, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
 226:	68e3      	ldr	r3, [r4, #12]
 228:	4383      	bics	r3, r0
 22a:	60e3      	str	r3, [r4, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return clkin / div;
 22c:	0028      	movs	r0, r5
 22e:	f000 f9b1 	bl	594 <__udivsi3>
}
 232:	bd70      	pop	{r4, r5, r6, pc}

00000234 <SysTick_Handler>:
volatile uint32_t msTicks;

uint8_t Rx_Buf[8];

void SysTick_Handler(void) {
	msTicks++;
 234:	4a02      	ldr	r2, [pc, #8]	; (240 <SysTick_Handler+0xc>)
 236:	6813      	ldr	r3, [r2, #0]
 238:	3301      	adds	r3, #1
 23a:	6013      	str	r3, [r2, #0]
}
 23c:	4770      	bx	lr
 23e:	46c0      	nop			; (mov r8, r8)
 240:	10000104 	.word	0x10000104

00000244 <Uart_Setup>:
 * @param	modefunc	: OR'ed values or type IOCON_*
 * @return	Nothing
 */
STATIC INLINE void Chip_IOCON_PinMuxSet(LPC_IOCON_T *pIOCON, CHIP_IOCON_PIO_T pin, uint32_t modefunc)
{
	pIOCON->REG[pin] = modefunc;
 244:	2201      	movs	r2, #1
 246:	21a4      	movs	r1, #164	; 0xa4
 248:	4b0a      	ldr	r3, [pc, #40]	; (274 <Uart_Setup+0x30>)

void Uart_Setup(void){
 24a:	b510      	push	{r4, lr}
    Chip_IOCON_PinMuxSet(LPC_IOCON, IOCON_PIO1_6, (IOCON_FUNC1 | IOCON_MODE_INACT));/* RXD */
    Chip_IOCON_PinMuxSet(LPC_IOCON, IOCON_PIO1_7, (IOCON_FUNC1 | IOCON_MODE_INACT));/* TXD */

    Chip_UART_Init(LPC_USART);
 24c:	4c0a      	ldr	r4, [pc, #40]	; (278 <Uart_Setup+0x34>)
 24e:	505a      	str	r2, [r3, r1]
 250:	3104      	adds	r1, #4
 252:	505a      	str	r2, [r3, r1]
 254:	0020      	movs	r0, r4
 256:	f7ff ffbd 	bl	1d4 <Chip_UART_Init>
    Chip_UART_SetBaud(LPC_USART, 57600);
 25a:	21e1      	movs	r1, #225	; 0xe1
 25c:	0020      	movs	r0, r4
 25e:	0209      	lsls	r1, r1, #8
 260:	f7ff ffcc 	bl	1fc <Chip_UART_SetBaud>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
 264:	2303      	movs	r3, #3
 266:	60e3      	str	r3, [r4, #12]
	pUART->FCR = fcr;
 268:	337e      	adds	r3, #126	; 0x7e
 26a:	60a3      	str	r3, [r4, #8]
	pUART->TER1 = UART_TER1_TXEN;
 26c:	3b01      	subs	r3, #1
 26e:	6323      	str	r3, [r4, #48]	; 0x30
    Chip_UART_ConfigData(LPC_USART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));
    Chip_UART_SetupFIFOS(LPC_USART, (UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2));
    Chip_UART_TXEnable(LPC_USART);
}
 270:	bd10      	pop	{r4, pc}
 272:	46c0      	nop			; (mov r8, r8)
 274:	40044000 	.word	0x40044000
 278:	40008000 	.word	0x40008000

0000027c <GPIO_Setup>:

static void Pin_Write(uint8_t port, uint8_t pin, uint8_t val) {
	Chip_GPIO_SetPinState(LPC_GPIO, port, pin, val);
}

void GPIO_Setup(void){
 27c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    Chip_GPIO_Init(LPC_GPIO);
 27e:	24a0      	movs	r4, #160	; 0xa0
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
 280:	2780      	movs	r7, #128	; 0x80
 282:	2500      	movs	r5, #0
 284:	05e4      	lsls	r4, r4, #23
 286:	4e1e      	ldr	r6, [pc, #120]	; (300 <GPIO_Setup+0x84>)
 288:	0020      	movs	r0, r4
 28a:	f7ff ff37 	bl	fc <Chip_GPIO_Init>
 28e:	00ff      	lsls	r7, r7, #3
	Chip_GPIO_WriteDirBit(LPC_GPIO, port, pin, true);
 290:	0020      	movs	r0, r4
 292:	2301      	movs	r3, #1
 294:	2208      	movs	r2, #8
 296:	2102      	movs	r1, #2
 298:	f7ff ff3a 	bl	110 <Chip_GPIO_WriteDirBit>
 29c:	51f5      	str	r5, [r6, r7]
 29e:	0020      	movs	r0, r4
 2a0:	2301      	movs	r3, #1
 2a2:	2207      	movs	r2, #7
 2a4:	2102      	movs	r1, #2
 2a6:	f7ff ff33 	bl	110 <Chip_GPIO_WriteDirBit>
 2aa:	2380      	movs	r3, #128	; 0x80
 2ac:	009b      	lsls	r3, r3, #2
 2ae:	50f5      	str	r5, [r6, r3]
 2b0:	0020      	movs	r0, r4
 2b2:	2301      	movs	r3, #1
 2b4:	2208      	movs	r2, #8
 2b6:	2101      	movs	r1, #1
 2b8:	f7ff ff2a 	bl	110 <Chip_GPIO_WriteDirBit>
 2bc:	4b11      	ldr	r3, [pc, #68]	; (304 <GPIO_Setup+0x88>)
 2be:	0020      	movs	r0, r4
 2c0:	51dd      	str	r5, [r3, r7]
 2c2:	2206      	movs	r2, #6
 2c4:	2301      	movs	r3, #1
 2c6:	2102      	movs	r1, #2
 2c8:	f7ff ff22 	bl	110 <Chip_GPIO_WriteDirBit>
 2cc:	2380      	movs	r3, #128	; 0x80
 2ce:	005b      	lsls	r3, r3, #1
 2d0:	50f5      	str	r5, [r6, r3]
 2d2:	4e0d      	ldr	r6, [pc, #52]	; (308 <GPIO_Setup+0x8c>)
 2d4:	0020      	movs	r0, r4
 2d6:	3bff      	subs	r3, #255	; 0xff
 2d8:	2203      	movs	r2, #3
 2da:	2103      	movs	r1, #3
 2dc:	f7ff ff18 	bl	110 <Chip_GPIO_WriteDirBit>
 2e0:	6235      	str	r5, [r6, #32]
 2e2:	0020      	movs	r0, r4
 2e4:	2301      	movs	r3, #1
 2e6:	2201      	movs	r2, #1
 2e8:	2103      	movs	r1, #3
 2ea:	f7ff ff11 	bl	110 <Chip_GPIO_WriteDirBit>
 2ee:	60b5      	str	r5, [r6, #8]
 2f0:	2301      	movs	r3, #1
 2f2:	2200      	movs	r2, #0
 2f4:	2103      	movs	r1, #3
 2f6:	0020      	movs	r0, r4
 2f8:	f7ff ff0a 	bl	110 <Chip_GPIO_WriteDirBit>
 2fc:	6075      	str	r5, [r6, #4]
    GPIO_Init(EN);
    GPIO_Init(DB4);
    GPIO_Init(DB5);
    GPIO_Init(DB6);
    GPIO_Init(DB7);
}
 2fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 300:	50020000 	.word	0x50020000
 304:	50010000 	.word	0x50010000
 308:	50030000 	.word	0x50030000

0000030c <LCD_Cnvrt>:
 30c:	2201      	movs	r2, #1
    Pin_Write(DB4, 0);
    Pin_Write(DB5, 0);
    Pin_Write(DB6, 0);
    Pin_Write(DB7, 0);
}
void LCD_Cnvrt(char c){
 30e:	b570      	push	{r4, r5, r6, lr}
 310:	2480      	movs	r4, #128	; 0x80
    int upper = c >> 4;
 312:	0903      	lsrs	r3, r0, #4
 314:	401a      	ands	r2, r3
 316:	4923      	ldr	r1, [pc, #140]	; (3a4 <LCD_Cnvrt+0x98>)
 318:	0192      	lsls	r2, r2, #6
 31a:	0064      	lsls	r4, r4, #1
 31c:	510a      	str	r2, [r1, r4]
 31e:	2208      	movs	r2, #8
 320:	2502      	movs	r5, #2
 322:	0099      	lsls	r1, r3, #2
 324:	4011      	ands	r1, r2
 326:	4a20      	ldr	r2, [pc, #128]	; (3a8 <LCD_Cnvrt+0x9c>)
 328:	6211      	str	r1, [r2, #32]
 32a:	0859      	lsrs	r1, r3, #1
 32c:	4029      	ands	r1, r5
    int og = c;
    ///upper bits///
    Pin_Write(DB4, (upper&(1<<0))>>0);
    Pin_Write(DB5, (upper&(1<<1))>>1);
    Pin_Write(DB6, (upper&(1<<2))>>2);
    Pin_Write(DB7, (upper&(1<<3))>>3);
 32e:	10db      	asrs	r3, r3, #3
 330:	6091      	str	r1, [r2, #8]
 332:	6053      	str	r3, [r2, #4]
 334:	2380      	movs	r3, #128	; 0x80
 336:	4a1d      	ldr	r2, [pc, #116]	; (3ac <LCD_Cnvrt+0xa0>)
 338:	00db      	lsls	r3, r3, #3
 33a:	50d4      	str	r4, [r2, r3]
    uint32_t startTime = msTicks;
 33c:	4b1c      	ldr	r3, [pc, #112]	; (3b0 <LCD_Cnvrt+0xa4>)
 33e:	6819      	ldr	r1, [r3, #0]
        diff = msTicks - startTime;
 340:	681a      	ldr	r2, [r3, #0]
    while(diff < dlyTicks){
 342:	4291      	cmp	r1, r2
 344:	d0fc      	beq.n	340 <LCD_Cnvrt+0x34>
 346:	2280      	movs	r2, #128	; 0x80
 348:	2400      	movs	r4, #0
 34a:	4918      	ldr	r1, [pc, #96]	; (3ac <LCD_Cnvrt+0xa0>)
 34c:	00d2      	lsls	r2, r2, #3
 34e:	508c      	str	r4, [r1, r2]
    uint32_t startTime = msTicks;
 350:	6819      	ldr	r1, [r3, #0]
        diff = msTicks - startTime;
 352:	681a      	ldr	r2, [r3, #0]
    while(diff < dlyTicks){
 354:	4291      	cmp	r1, r2
 356:	d0fc      	beq.n	352 <LCD_Cnvrt+0x46>
    Enable();
    // Delay(1);
    ///llower bits///
    Pin_Write(DB4, (og&(1<<0))>>0);
 358:	2201      	movs	r2, #1
 35a:	0011      	movs	r1, r2
 35c:	2580      	movs	r5, #128	; 0x80
 35e:	4001      	ands	r1, r0
 360:	4c10      	ldr	r4, [pc, #64]	; (3a4 <LCD_Cnvrt+0x98>)
 362:	0189      	lsls	r1, r1, #6
 364:	006d      	lsls	r5, r5, #1
 366:	5161      	str	r1, [r4, r5]
 368:	2108      	movs	r1, #8
 36a:	0084      	lsls	r4, r0, #2
 36c:	400c      	ands	r4, r1
 36e:	490e      	ldr	r1, [pc, #56]	; (3a8 <LCD_Cnvrt+0x9c>)
 370:	2602      	movs	r6, #2
 372:	620c      	str	r4, [r1, #32]
 374:	0844      	lsrs	r4, r0, #1
    Pin_Write(DB5, (og&(1<<1))>>1);
    Pin_Write(DB6, (og&(1<<2))>>2);
    Pin_Write(DB7, (og&(1<<3))>>3);
 376:	10c0      	asrs	r0, r0, #3
 378:	4010      	ands	r0, r2
 37a:	2280      	movs	r2, #128	; 0x80
 37c:	4034      	ands	r4, r6
 37e:	608c      	str	r4, [r1, #8]
 380:	6048      	str	r0, [r1, #4]
 382:	490a      	ldr	r1, [pc, #40]	; (3ac <LCD_Cnvrt+0xa0>)
 384:	00d2      	lsls	r2, r2, #3
 386:	508d      	str	r5, [r1, r2]
    uint32_t startTime = msTicks;
 388:	6819      	ldr	r1, [r3, #0]
        diff = msTicks - startTime;
 38a:	681a      	ldr	r2, [r3, #0]
    while(diff < dlyTicks){
 38c:	4291      	cmp	r1, r2
 38e:	d0fc      	beq.n	38a <LCD_Cnvrt+0x7e>
 390:	2280      	movs	r2, #128	; 0x80
 392:	2000      	movs	r0, #0
 394:	4905      	ldr	r1, [pc, #20]	; (3ac <LCD_Cnvrt+0xa0>)
 396:	00d2      	lsls	r2, r2, #3
 398:	5088      	str	r0, [r1, r2]
    uint32_t startTime = msTicks;
 39a:	6819      	ldr	r1, [r3, #0]
        diff = msTicks - startTime;
 39c:	681a      	ldr	r2, [r3, #0]
    while(diff < dlyTicks){
 39e:	4291      	cmp	r1, r2
 3a0:	d0fc      	beq.n	39c <LCD_Cnvrt+0x90>
    Enable();
}
 3a2:	bd70      	pop	{r4, r5, r6, pc}
 3a4:	50020000 	.word	0x50020000
 3a8:	50030000 	.word	0x50030000
 3ac:	50010000 	.word	0x50010000
 3b0:	10000104 	.word	0x10000104

000003b4 <LCD_Special_Cmd>:
 3b4:	2280      	movs	r2, #128	; 0x80
 3b6:	2300      	movs	r3, #0

void LCD_Special_Cmd(char c){
 3b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 3ba:	4c14      	ldr	r4, [pc, #80]	; (40c <LCD_Special_Cmd+0x58>)
 3bc:	4d14      	ldr	r5, [pc, #80]	; (410 <LCD_Special_Cmd+0x5c>)
 3be:	00d2      	lsls	r2, r2, #3
 3c0:	50a3      	str	r3, [r4, r2]
 3c2:	50ab      	str	r3, [r5, r2]
    Pin_Write(RS, 0);
    Pin_Write(EN, 0);

    int og = c;
    Pin_Write(DB4, (og&(1<<0))>>0);
 3c4:	3301      	adds	r3, #1
 3c6:	0019      	movs	r1, r3
 3c8:	2680      	movs	r6, #128	; 0x80
 3ca:	4001      	ands	r1, r0
 3cc:	0189      	lsls	r1, r1, #6
 3ce:	0076      	lsls	r6, r6, #1
 3d0:	51a1      	str	r1, [r4, r6]
 3d2:	2108      	movs	r1, #8
 3d4:	2702      	movs	r7, #2
 3d6:	0084      	lsls	r4, r0, #2
 3d8:	400c      	ands	r4, r1
 3da:	490e      	ldr	r1, [pc, #56]	; (414 <LCD_Special_Cmd+0x60>)
 3dc:	620c      	str	r4, [r1, #32]
 3de:	0844      	lsrs	r4, r0, #1
    Pin_Write(DB5, (og&(1<<1))>>1);
    Pin_Write(DB6, (og&(1<<2))>>2);
    Pin_Write(DB7, (og&(1<<3))>>3);
 3e0:	10c0      	asrs	r0, r0, #3
 3e2:	4018      	ands	r0, r3
 3e4:	403c      	ands	r4, r7
    uint32_t startTime = msTicks;
 3e6:	4b0c      	ldr	r3, [pc, #48]	; (418 <LCD_Special_Cmd+0x64>)
 3e8:	608c      	str	r4, [r1, #8]
 3ea:	6048      	str	r0, [r1, #4]
 3ec:	50ae      	str	r6, [r5, r2]
 3ee:	6819      	ldr	r1, [r3, #0]
        diff = msTicks - startTime;
 3f0:	681a      	ldr	r2, [r3, #0]
    while(diff < dlyTicks){
 3f2:	4291      	cmp	r1, r2
 3f4:	d0fc      	beq.n	3f0 <LCD_Special_Cmd+0x3c>
 3f6:	2280      	movs	r2, #128	; 0x80
 3f8:	2000      	movs	r0, #0
 3fa:	4905      	ldr	r1, [pc, #20]	; (410 <LCD_Special_Cmd+0x5c>)
 3fc:	00d2      	lsls	r2, r2, #3
 3fe:	5088      	str	r0, [r1, r2]
    uint32_t startTime = msTicks;
 400:	6819      	ldr	r1, [r3, #0]
        diff = msTicks - startTime;
 402:	681a      	ldr	r2, [r3, #0]
    while(diff < dlyTicks){
 404:	4291      	cmp	r1, r2
 406:	d0fc      	beq.n	402 <LCD_Special_Cmd+0x4e>
    Enable();
}
 408:	bdf0      	pop	{r4, r5, r6, r7, pc}
 40a:	46c0      	nop			; (mov r8, r8)
 40c:	50020000 	.word	0x50020000
 410:	50010000 	.word	0x50010000
 414:	50030000 	.word	0x50030000
 418:	10000104 	.word	0x10000104

0000041c <Init_LCD>:
void LCD_WriteChar(char c){
    Pin_Write(RS, 1);
    Pin_Write(EN, 0);
    LCD_Cnvrt(c);
}
void Init_LCD(void){
 41c:	b510      	push	{r4, lr}
    uint32_t startTime = msTicks;
 41e:	4c2f      	ldr	r4, [pc, #188]	; (4dc <Init_LCD+0xc0>)
 420:	6822      	ldr	r2, [r4, #0]
        diff = msTicks - startTime;
 422:	6823      	ldr	r3, [r4, #0]
 424:	1a9b      	subs	r3, r3, r2
    while(diff < dlyTicks){
 426:	2b27      	cmp	r3, #39	; 0x27
 428:	d9fb      	bls.n	422 <Init_LCD+0x6>
 42a:	2380      	movs	r3, #128	; 0x80
 42c:	2100      	movs	r1, #0
 42e:	4a2c      	ldr	r2, [pc, #176]	; (4e0 <Init_LCD+0xc4>)
 430:	009b      	lsls	r3, r3, #2
 432:	50d1      	str	r1, [r2, r3]
    Delay(40);
    Pin_Write(RW, 0);
    //set configuration//
    LCD_Special_Cmd(0b0011); //functionset
 434:	2003      	movs	r0, #3
 436:	f7ff ffbd 	bl	3b4 <LCD_Special_Cmd>
    uint32_t startTime = msTicks;
 43a:	6822      	ldr	r2, [r4, #0]
        diff = msTicks - startTime;
 43c:	6823      	ldr	r3, [r4, #0]
 43e:	1a9b      	subs	r3, r3, r2
    while(diff < dlyTicks){
 440:	2b04      	cmp	r3, #4
 442:	d9fb      	bls.n	43c <Init_LCD+0x20>
 444:	2380      	movs	r3, #128	; 0x80
 446:	2200      	movs	r2, #0
 448:	4925      	ldr	r1, [pc, #148]	; (4e0 <Init_LCD+0xc4>)
 44a:	00db      	lsls	r3, r3, #3
 44c:	50ca      	str	r2, [r1, r3]
 44e:	4925      	ldr	r1, [pc, #148]	; (4e4 <Init_LCD+0xc8>)
    LCD_Cnvrt(cmd);
 450:	2020      	movs	r0, #32
 452:	50ca      	str	r2, [r1, r3]
 454:	f7ff ff5a 	bl	30c <LCD_Cnvrt>
    uint32_t startTime = msTicks;
 458:	6822      	ldr	r2, [r4, #0]
        diff = msTicks - startTime;
 45a:	6823      	ldr	r3, [r4, #0]
 45c:	1a9b      	subs	r3, r3, r2
    while(diff < dlyTicks){
 45e:	2b04      	cmp	r3, #4
 460:	d9fb      	bls.n	45a <Init_LCD+0x3e>
 462:	2380      	movs	r3, #128	; 0x80
 464:	2200      	movs	r2, #0
 466:	491e      	ldr	r1, [pc, #120]	; (4e0 <Init_LCD+0xc4>)
 468:	00db      	lsls	r3, r3, #3
 46a:	50ca      	str	r2, [r1, r3]
 46c:	491d      	ldr	r1, [pc, #116]	; (4e4 <Init_LCD+0xc8>)
    LCD_Cnvrt(cmd);
 46e:	2020      	movs	r0, #32
 470:	50ca      	str	r2, [r1, r3]
 472:	f7ff ff4b 	bl	30c <LCD_Cnvrt>
    uint32_t startTime = msTicks;
 476:	6822      	ldr	r2, [r4, #0]
        diff = msTicks - startTime;
 478:	6823      	ldr	r3, [r4, #0]
 47a:	1a9b      	subs	r3, r3, r2
    while(diff < dlyTicks){
 47c:	2b04      	cmp	r3, #4
 47e:	d9fb      	bls.n	478 <Init_LCD+0x5c>
 480:	2380      	movs	r3, #128	; 0x80
 482:	2200      	movs	r2, #0
 484:	4916      	ldr	r1, [pc, #88]	; (4e0 <Init_LCD+0xc4>)
 486:	00db      	lsls	r3, r3, #3
 488:	50ca      	str	r2, [r1, r3]
 48a:	4916      	ldr	r1, [pc, #88]	; (4e4 <Init_LCD+0xc8>)
    LCD_Cnvrt(cmd);
 48c:	200c      	movs	r0, #12
 48e:	50ca      	str	r2, [r1, r3]
 490:	f7ff ff3c 	bl	30c <LCD_Cnvrt>
    uint32_t startTime = msTicks;
 494:	6822      	ldr	r2, [r4, #0]
        diff = msTicks - startTime;
 496:	6823      	ldr	r3, [r4, #0]
    while(diff < dlyTicks){
 498:	429a      	cmp	r2, r3
 49a:	d0fc      	beq.n	496 <Init_LCD+0x7a>
 49c:	2380      	movs	r3, #128	; 0x80
 49e:	2200      	movs	r2, #0
 4a0:	490f      	ldr	r1, [pc, #60]	; (4e0 <Init_LCD+0xc4>)
 4a2:	00db      	lsls	r3, r3, #3
 4a4:	50ca      	str	r2, [r1, r3]
 4a6:	490f      	ldr	r1, [pc, #60]	; (4e4 <Init_LCD+0xc8>)
    LCD_Cnvrt(cmd);
 4a8:	2001      	movs	r0, #1
 4aa:	50ca      	str	r2, [r1, r3]
 4ac:	f7ff ff2e 	bl	30c <LCD_Cnvrt>
    uint32_t startTime = msTicks;
 4b0:	6822      	ldr	r2, [r4, #0]
        diff = msTicks - startTime;
 4b2:	6823      	ldr	r3, [r4, #0]
 4b4:	1a9b      	subs	r3, r3, r2
    while(diff < dlyTicks){
 4b6:	2b01      	cmp	r3, #1
 4b8:	d9fb      	bls.n	4b2 <Init_LCD+0x96>
 4ba:	2380      	movs	r3, #128	; 0x80
 4bc:	2200      	movs	r2, #0
 4be:	4908      	ldr	r1, [pc, #32]	; (4e0 <Init_LCD+0xc4>)
 4c0:	00db      	lsls	r3, r3, #3
 4c2:	50ca      	str	r2, [r1, r3]
 4c4:	4907      	ldr	r1, [pc, #28]	; (4e4 <Init_LCD+0xc8>)
    LCD_Cnvrt(cmd);
 4c6:	2006      	movs	r0, #6
 4c8:	50ca      	str	r2, [r1, r3]
 4ca:	f7ff ff1f 	bl	30c <LCD_Cnvrt>
    uint32_t startTime = msTicks;
 4ce:	6822      	ldr	r2, [r4, #0]
        diff = msTicks - startTime;
 4d0:	6823      	ldr	r3, [r4, #0]
 4d2:	1a9b      	subs	r3, r3, r2
    while(diff < dlyTicks){
 4d4:	2b01      	cmp	r3, #1
 4d6:	d9fb      	bls.n	4d0 <Init_LCD+0xb4>
    LCD_Cmd(0b00000001); //display clear
    Delay(2);
    LCD_Cmd(0b00000110); //entry mode set
    Delay(2);

}
 4d8:	bd10      	pop	{r4, pc}
 4da:	46c0      	nop			; (mov r8, r8)
 4dc:	10000104 	.word	0x10000104
 4e0:	50020000 	.word	0x50020000
 4e4:	50010000 	.word	0x50010000

000004e8 <main>:



int main(void)
{
 4e8:	b510      	push	{r4, lr}

	SystemCoreClockUpdate();
 4ea:	f7ff fdff 	bl	ec <SystemCoreClockUpdate>
	if (SysTick_Config (SystemCoreClock / 1000)) {
 4ee:	21fa      	movs	r1, #250	; 0xfa
 4f0:	4b12      	ldr	r3, [pc, #72]	; (53c <main+0x54>)
 4f2:	0089      	lsls	r1, r1, #2
 4f4:	6818      	ldr	r0, [r3, #0]
 4f6:	f000 f84d 	bl	594 <__udivsi3>
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 4fa:	21c0      	movs	r1, #192	; 0xc0
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 4fc:	4a10      	ldr	r2, [pc, #64]	; (540 <main+0x58>)
 4fe:	3801      	subs	r0, #1
 500:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 502:	4810      	ldr	r0, [pc, #64]	; (544 <main+0x5c>)
 504:	0609      	lsls	r1, r1, #24
 506:	6a03      	ldr	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 508:	2400      	movs	r4, #0
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 50a:	021b      	lsls	r3, r3, #8
 50c:	0a1b      	lsrs	r3, r3, #8
 50e:	430b      	orrs	r3, r1
 510:	6203      	str	r3, [r0, #32]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 512:	2307      	movs	r3, #7
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 514:	6094      	str	r4, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 516:	6013      	str	r3, [r2, #0]
		//Error

		while(1);
	}
    Uart_Setup();
 518:	f7ff fe94 	bl	244 <Uart_Setup>
    GPIO_Setup();
 51c:	f7ff feae 	bl	27c <GPIO_Setup>
    Init_LCD();
 520:	f7ff ff7c 	bl	41c <Init_LCD>
 524:	2380      	movs	r3, #128	; 0x80
 526:	2180      	movs	r1, #128	; 0x80
 528:	4a07      	ldr	r2, [pc, #28]	; (548 <main+0x60>)
 52a:	00db      	lsls	r3, r3, #3
 52c:	0049      	lsls	r1, r1, #1
 52e:	50d1      	str	r1, [r2, r3]
 530:	4a06      	ldr	r2, [pc, #24]	; (54c <main+0x64>)
    LCD_Cnvrt(c);
 532:	2041      	movs	r0, #65	; 0x41
 534:	50d4      	str	r4, [r2, r3]
 536:	f7ff fee9 	bl	30c <LCD_Cnvrt>
 53a:	e7fe      	b.n	53a <main+0x52>
 53c:	10000100 	.word	0x10000100
 540:	e000e010 	.word	0xe000e010
 544:	e000ed00 	.word	0xe000ed00
 548:	50020000 	.word	0x50020000
 54c:	50010000 	.word	0x50010000

00000550 <SystemInit>:
#endif
#if (WDTOSC_SETUP)                                /* Watchdog Oscillator Setup*/
  LPC_SYSCTL->WDTOSCCTRL    = WDTOSCCTRL_Val;
  LPC_SYSCTL->PDRUNCFG     &= ~(1 << 6);          /* Power-up WDT Clock       */
#endif
  LPC_SYSCTL->MAINCLKSEL    = MAINCLKSEL_Val;     /* Select PLL Clock Output  */
 550:	2201      	movs	r2, #1
  LPC_SYSCTL->MAINCLKUEN    = 0x1;               /* Update MCLK Clock Source */
  LPC_SYSCTL->MAINCLKUEN    = 0x0;               /* Toggle Update Register   */
 552:	2100      	movs	r1, #0
  LPC_SYSCTL->MAINCLKSEL    = MAINCLKSEL_Val;     /* Select PLL Clock Output  */
 554:	4b0d      	ldr	r3, [pc, #52]	; (58c <SystemInit+0x3c>)
{
 556:	b510      	push	{r4, lr}
  LPC_SYSCTL->MAINCLKSEL    = MAINCLKSEL_Val;     /* Select PLL Clock Output  */
 558:	671a      	str	r2, [r3, #112]	; 0x70
  LPC_SYSCTL->MAINCLKUEN    = 0x1;               /* Update MCLK Clock Source */
 55a:	675a      	str	r2, [r3, #116]	; 0x74
  LPC_SYSCTL->MAINCLKUEN    = 0x0;               /* Toggle Update Register   */
 55c:	6759      	str	r1, [r3, #116]	; 0x74
  LPC_SYSCTL->MAINCLKUEN    = 0x1;
 55e:	675a      	str	r2, [r3, #116]	; 0x74
  while (!(LPC_SYSCTL->MAINCLKUEN & 0x1));       /* Wait Until Updated       */
 560:	3101      	adds	r1, #1
 562:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 564:	4211      	tst	r1, r2
 566:	d0fc      	beq.n	562 <SystemInit+0x12>
#endif
  LPC_SYSCTL->PDRUNCFG     |=  (1 << 10);         /* Power-down USB PHY       */
 568:	228e      	movs	r2, #142	; 0x8e
 56a:	2080      	movs	r0, #128	; 0x80
 56c:	0092      	lsls	r2, r2, #2
 56e:	589c      	ldr	r4, [r3, r2]
 570:	00c0      	lsls	r0, r0, #3
 572:	4320      	orrs	r0, r4
 574:	5098      	str	r0, [r3, r2]
  LPC_SYSCTL->PDRUNCFG     |=  (1 <<  8);         /* Power-down USB PLL       */
 576:	2080      	movs	r0, #128	; 0x80
 578:	589c      	ldr	r4, [r3, r2]
 57a:	0040      	lsls	r0, r0, #1
 57c:	4320      	orrs	r0, r4
 57e:	5098      	str	r0, [r3, r2]

  LPC_SYSCTL->SYSAHBCLKDIV  = SYSAHBCLKDIV_Val;
 580:	6799      	str	r1, [r3, #120]	; 0x78
  LPC_SYSCTL->SYSAHBCLKCTRL = AHBCLKCTRL_Val;
 582:	3ab9      	subs	r2, #185	; 0xb9
 584:	4902      	ldr	r1, [pc, #8]	; (590 <SystemInit+0x40>)
 586:	3aff      	subs	r2, #255	; 0xff
 588:	5099      	str	r1, [r3, r2]
#endif

#if (MEMMAP_SETUP || MEMMAP_INIT)       /* Memory Mapping Setup               */
  LPC_SYSCTL->SYSMEMREMAP = SYSMEMREMAP_Val;
#endif
}
 58a:	bd10      	pop	{r4, pc}
 58c:	40048000 	.word	0x40048000
 590:	0001005f 	.word	0x0001005f

00000594 <__udivsi3>:
 594:	2200      	movs	r2, #0
 596:	0843      	lsrs	r3, r0, #1
 598:	428b      	cmp	r3, r1
 59a:	d374      	bcc.n	686 <__udivsi3+0xf2>
 59c:	0903      	lsrs	r3, r0, #4
 59e:	428b      	cmp	r3, r1
 5a0:	d35f      	bcc.n	662 <__udivsi3+0xce>
 5a2:	0a03      	lsrs	r3, r0, #8
 5a4:	428b      	cmp	r3, r1
 5a6:	d344      	bcc.n	632 <__udivsi3+0x9e>
 5a8:	0b03      	lsrs	r3, r0, #12
 5aa:	428b      	cmp	r3, r1
 5ac:	d328      	bcc.n	600 <__udivsi3+0x6c>
 5ae:	0c03      	lsrs	r3, r0, #16
 5b0:	428b      	cmp	r3, r1
 5b2:	d30d      	bcc.n	5d0 <__udivsi3+0x3c>
 5b4:	22ff      	movs	r2, #255	; 0xff
 5b6:	0209      	lsls	r1, r1, #8
 5b8:	ba12      	rev	r2, r2
 5ba:	0c03      	lsrs	r3, r0, #16
 5bc:	428b      	cmp	r3, r1
 5be:	d302      	bcc.n	5c6 <__udivsi3+0x32>
 5c0:	1212      	asrs	r2, r2, #8
 5c2:	0209      	lsls	r1, r1, #8
 5c4:	d065      	beq.n	692 <__udivsi3+0xfe>
 5c6:	0b03      	lsrs	r3, r0, #12
 5c8:	428b      	cmp	r3, r1
 5ca:	d319      	bcc.n	600 <__udivsi3+0x6c>
 5cc:	e000      	b.n	5d0 <__udivsi3+0x3c>
 5ce:	0a09      	lsrs	r1, r1, #8
 5d0:	0bc3      	lsrs	r3, r0, #15
 5d2:	428b      	cmp	r3, r1
 5d4:	d301      	bcc.n	5da <__udivsi3+0x46>
 5d6:	03cb      	lsls	r3, r1, #15
 5d8:	1ac0      	subs	r0, r0, r3
 5da:	4152      	adcs	r2, r2
 5dc:	0b83      	lsrs	r3, r0, #14
 5de:	428b      	cmp	r3, r1
 5e0:	d301      	bcc.n	5e6 <__udivsi3+0x52>
 5e2:	038b      	lsls	r3, r1, #14
 5e4:	1ac0      	subs	r0, r0, r3
 5e6:	4152      	adcs	r2, r2
 5e8:	0b43      	lsrs	r3, r0, #13
 5ea:	428b      	cmp	r3, r1
 5ec:	d301      	bcc.n	5f2 <__udivsi3+0x5e>
 5ee:	034b      	lsls	r3, r1, #13
 5f0:	1ac0      	subs	r0, r0, r3
 5f2:	4152      	adcs	r2, r2
 5f4:	0b03      	lsrs	r3, r0, #12
 5f6:	428b      	cmp	r3, r1
 5f8:	d301      	bcc.n	5fe <__udivsi3+0x6a>
 5fa:	030b      	lsls	r3, r1, #12
 5fc:	1ac0      	subs	r0, r0, r3
 5fe:	4152      	adcs	r2, r2
 600:	0ac3      	lsrs	r3, r0, #11
 602:	428b      	cmp	r3, r1
 604:	d301      	bcc.n	60a <__udivsi3+0x76>
 606:	02cb      	lsls	r3, r1, #11
 608:	1ac0      	subs	r0, r0, r3
 60a:	4152      	adcs	r2, r2
 60c:	0a83      	lsrs	r3, r0, #10
 60e:	428b      	cmp	r3, r1
 610:	d301      	bcc.n	616 <__udivsi3+0x82>
 612:	028b      	lsls	r3, r1, #10
 614:	1ac0      	subs	r0, r0, r3
 616:	4152      	adcs	r2, r2
 618:	0a43      	lsrs	r3, r0, #9
 61a:	428b      	cmp	r3, r1
 61c:	d301      	bcc.n	622 <__udivsi3+0x8e>
 61e:	024b      	lsls	r3, r1, #9
 620:	1ac0      	subs	r0, r0, r3
 622:	4152      	adcs	r2, r2
 624:	0a03      	lsrs	r3, r0, #8
 626:	428b      	cmp	r3, r1
 628:	d301      	bcc.n	62e <__udivsi3+0x9a>
 62a:	020b      	lsls	r3, r1, #8
 62c:	1ac0      	subs	r0, r0, r3
 62e:	4152      	adcs	r2, r2
 630:	d2cd      	bcs.n	5ce <__udivsi3+0x3a>
 632:	09c3      	lsrs	r3, r0, #7
 634:	428b      	cmp	r3, r1
 636:	d301      	bcc.n	63c <__udivsi3+0xa8>
 638:	01cb      	lsls	r3, r1, #7
 63a:	1ac0      	subs	r0, r0, r3
 63c:	4152      	adcs	r2, r2
 63e:	0983      	lsrs	r3, r0, #6
 640:	428b      	cmp	r3, r1
 642:	d301      	bcc.n	648 <__udivsi3+0xb4>
 644:	018b      	lsls	r3, r1, #6
 646:	1ac0      	subs	r0, r0, r3
 648:	4152      	adcs	r2, r2
 64a:	0943      	lsrs	r3, r0, #5
 64c:	428b      	cmp	r3, r1
 64e:	d301      	bcc.n	654 <__udivsi3+0xc0>
 650:	014b      	lsls	r3, r1, #5
 652:	1ac0      	subs	r0, r0, r3
 654:	4152      	adcs	r2, r2
 656:	0903      	lsrs	r3, r0, #4
 658:	428b      	cmp	r3, r1
 65a:	d301      	bcc.n	660 <__udivsi3+0xcc>
 65c:	010b      	lsls	r3, r1, #4
 65e:	1ac0      	subs	r0, r0, r3
 660:	4152      	adcs	r2, r2
 662:	08c3      	lsrs	r3, r0, #3
 664:	428b      	cmp	r3, r1
 666:	d301      	bcc.n	66c <__udivsi3+0xd8>
 668:	00cb      	lsls	r3, r1, #3
 66a:	1ac0      	subs	r0, r0, r3
 66c:	4152      	adcs	r2, r2
 66e:	0883      	lsrs	r3, r0, #2
 670:	428b      	cmp	r3, r1
 672:	d301      	bcc.n	678 <__udivsi3+0xe4>
 674:	008b      	lsls	r3, r1, #2
 676:	1ac0      	subs	r0, r0, r3
 678:	4152      	adcs	r2, r2
 67a:	0843      	lsrs	r3, r0, #1
 67c:	428b      	cmp	r3, r1
 67e:	d301      	bcc.n	684 <__udivsi3+0xf0>
 680:	004b      	lsls	r3, r1, #1
 682:	1ac0      	subs	r0, r0, r3
 684:	4152      	adcs	r2, r2
 686:	1a41      	subs	r1, r0, r1
 688:	d200      	bcs.n	68c <__udivsi3+0xf8>
 68a:	4601      	mov	r1, r0
 68c:	4152      	adcs	r2, r2
 68e:	4610      	mov	r0, r2
 690:	4770      	bx	lr
 692:	e7ff      	b.n	694 <__udivsi3+0x100>
 694:	b501      	push	{r0, lr}
 696:	2000      	movs	r0, #0
 698:	f000 f806 	bl	6a8 <__aeabi_idiv0>
 69c:	bd02      	pop	{r1, pc}
 69e:	46c0      	nop			; (mov r8, r8)

000006a0 <__aeabi_uidivmod>:
 6a0:	2900      	cmp	r1, #0
 6a2:	d0f7      	beq.n	694 <__udivsi3+0x100>
 6a4:	e776      	b.n	594 <__udivsi3>
 6a6:	4770      	bx	lr

000006a8 <__aeabi_idiv0>:
 6a8:	4770      	bx	lr
 6aa:	46c0      	nop			; (mov r8, r8)

000006ac <wdtOSCRate>:
 6ac:	0000 0000 27c0 0009 0590 0010 5cc0 0015     .....'.......\..
 6bc:	b3f0 001a 0b20 0020 9f00 0024 32e0 0029     .... . ...$..2).
 6cc:	c6c0 002d 9750 0031 67e0 0035 3870 0039     ..-.P.1..g5.p89.
 6dc:	0900 003d 1640 0040 2380 0043 30c0 0046     ..=.@.@..#C..0F.

000006ec <OscRateIn>:
 6ec:	0000 0000                                   ....
