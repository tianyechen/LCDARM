
bin/can.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__isr_vector>:
   0:	10002000 	.word	0x10002000
   4:	000000c1 	.word	0x000000c1
   8:	000000e1 	.word	0x000000e1
   c:	000000e3 	.word	0x000000e3
	...
  2c:	000000e5 	.word	0x000000e5
	...
  38:	000000e7 	.word	0x000000e7
  3c:	0000031d 	.word	0x0000031d
  40:	000000eb 	.word	0x000000eb
  44:	000000eb 	.word	0x000000eb
  48:	000000eb 	.word	0x000000eb
  4c:	000000eb 	.word	0x000000eb
  50:	000000eb 	.word	0x000000eb
  54:	000000eb 	.word	0x000000eb
  58:	000000eb 	.word	0x000000eb
  5c:	000000eb 	.word	0x000000eb
  60:	000000eb 	.word	0x000000eb
  64:	000000eb 	.word	0x000000eb
  68:	000000eb 	.word	0x000000eb
  6c:	000000eb 	.word	0x000000eb
  70:	000000eb 	.word	0x000000eb
  74:	000003c1 	.word	0x000003c1
  78:	000000eb 	.word	0x000000eb
  7c:	000000eb 	.word	0x000000eb
  80:	000000eb 	.word	0x000000eb
  84:	000000eb 	.word	0x000000eb
  88:	000000eb 	.word	0x000000eb
  8c:	000000eb 	.word	0x000000eb
  90:	000000eb 	.word	0x000000eb
  94:	000000eb 	.word	0x000000eb
	...
  a0:	000000eb 	.word	0x000000eb
  a4:	000000eb 	.word	0x000000eb
  a8:	000000eb 	.word	0x000000eb
  ac:	00000000 	.word	0x00000000
  b0:	000000eb 	.word	0x000000eb
  b4:	000000eb 	.word	0x000000eb
  b8:	000000eb 	.word	0x000000eb
  bc:	000000eb 	.word	0x000000eb

000000c0 <Reset_Handler>:
 *    __bss_start__: start of the BSS section.
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
    ldr r1, =__bss_start__
  c0:	4905      	ldr	r1, [pc, #20]	; (d8 <Reset_Handler+0x18>)
    ldr r2, =__bss_end__
  c2:	4a06      	ldr	r2, [pc, #24]	; (dc <Reset_Handler+0x1c>)

    movs    r0, #0
  c4:	2000      	movs	r0, #0

    sub    r2, r1
  c6:	1a52      	subs	r2, r2, r1
    ble .L_loop3_done
  c8:	dd02      	ble.n	d0 <Reset_Handler+0x10>

.L_loop3:
    sub    r2, #4
  ca:	3a04      	subs	r2, #4
    str r0, [r1, r2]
  cc:	5088      	str	r0, [r1, r2]
    bgt .L_loop3
  ce:	dcfc      	bgt.n	ca <Reset_Handler+0xa>
.L_loop3_done:
#endif /* __STARTUP_CLEAR_BSS */


#ifndef __NO_SYSTEM_INIT
    bl  SystemInit
  d0:	f000 fab0 	bl	634 <SystemInit>
#endif

#ifndef __START
#define __START _start
#endif
    bl  __START
  d4:	f000 f97e 	bl	3d4 <main>
    ldr r1, =__bss_start__
  d8:	10000108 	.word	0x10000108
    ldr r2, =__bss_end__
  dc:	10000270 	.word	0x10000270

000000e0 <NMI_Handler>:
/* Exception Handlers */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
  e0:	e7fe      	b.n	e0 <NMI_Handler>

000000e2 <HardFault_Handler>:
    .size   NMI_Handler, . - NMI_Handler

    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
  e2:	e7fe      	b.n	e2 <HardFault_Handler>

000000e4 <SVC_Handler>:
    .size   HardFault_Handler, . - HardFault_Handler

    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
  e4:	e7fe      	b.n	e4 <SVC_Handler>

000000e6 <PendSV_Handler>:
    .size   SVC_Handler, . - SVC_Handler

    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
  e6:	e7fe      	b.n	e6 <PendSV_Handler>
    .size   PendSV_Handler, . - PendSV_Handler

    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
  e8:	e7fe      	b.n	e8 <PendSV_Handler+0x2>

000000ea <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
  ea:	e7fe      	b.n	ea <Default_Handler>

000000ec <RingBuffer_Init>:

/* Initialize ring buffer */
int RingBuffer_Init(RINGBUFF_T *RingBuff, void *buffer, uint32_t itemSize, uint32_t count)
{
	RingBuff->data = buffer;
	RingBuff->count = count;
  ec:	6043      	str	r3, [r0, #4]
	RingBuff->itemSz = itemSize;
	RingBuff->head = RingBuff->tail = 0;
  ee:	2300      	movs	r3, #0
	RingBuff->data = buffer;
  f0:	6001      	str	r1, [r0, #0]
	RingBuff->itemSz = itemSize;
  f2:	6082      	str	r2, [r0, #8]
	RingBuff->head = RingBuff->tail = 0;
  f4:	6103      	str	r3, [r0, #16]
  f6:	60c3      	str	r3, [r0, #12]

	return 1;
}
  f8:	2001      	movs	r0, #1
  fa:	4770      	bx	lr

000000fc <RingBuffer_Pop>:
	return cnt1 + cnt2;
}

/* Pop single item from Ring Buffer */
int RingBuffer_Pop(RINGBUFF_T *RingBuff, void *data)
{
  fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  fe:	0004      	movs	r4, r0
 100:	6903      	ldr	r3, [r0, #16]
	uint8_t *ptr = RingBuff->data;

	/* We cannot pop when queue is empty */
	if (RingBuffer_IsEmpty(RingBuff))
 102:	68e2      	ldr	r2, [r4, #12]
{
 104:	000e      	movs	r6, r1
		return 0;
 106:	2000      	movs	r0, #0
	if (RingBuffer_IsEmpty(RingBuff))
 108:	429a      	cmp	r2, r3
 10a:	d00f      	beq.n	12c <RingBuffer_Pop+0x30>

	ptr += RB_INDT(RingBuff) * RingBuff->itemSz;
 10c:	0018      	movs	r0, r3
 10e:	6861      	ldr	r1, [r4, #4]
 110:	f000 fb5c 	bl	7cc <__aeabi_uidivmod>
 114:	68a7      	ldr	r7, [r4, #8]
	uint8_t *ptr = RingBuff->data;
 116:	6825      	ldr	r5, [r4, #0]
	ptr += RB_INDT(RingBuff) * RingBuff->itemSz;
 118:	4379      	muls	r1, r7
	memcpy(data, ptr, RingBuff->itemSz);
 11a:	003a      	movs	r2, r7
	ptr += RB_INDT(RingBuff) * RingBuff->itemSz;
 11c:	1869      	adds	r1, r5, r1
	memcpy(data, ptr, RingBuff->itemSz);
 11e:	0030      	movs	r0, r6
 120:	f000 fb76 	bl	810 <memcpy>
	RingBuff->tail++;
 
	return 1;
 124:	2001      	movs	r0, #1
	RingBuff->tail++;
 126:	6923      	ldr	r3, [r4, #16]
 128:	3301      	adds	r3, #1
 12a:	6123      	str	r3, [r4, #16]
}
 12c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 12e:	46c0      	nop			; (mov r8, r8)

00000130 <SystemCoreClockUpdate>:
 ****************************************************************************/

/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
 130:	b510      	push	{r4, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetSystemClockRate();
 132:	f000 f85d 	bl	1f0 <Chip_Clock_GetSystemClockRate>
 136:	4b01      	ldr	r3, [pc, #4]	; (13c <SystemCoreClockUpdate+0xc>)
 138:	6018      	str	r0, [r3, #0]
}
 13a:	bd10      	pop	{r4, pc}
 13c:	10000100 	.word	0x10000100

00000140 <Chip_GPIO_WriteDirBit>:

/* Set GPIO direction */
void Chip_GPIO_WriteDirBit(LPC_GPIO_T *pGPIO, uint32_t port, uint8_t bit, bool setting)
{
	if (setting) {
		pGPIO[port].DIR |= 1UL << bit;
 140:	0409      	lsls	r1, r1, #16
{
 142:	b510      	push	{r4, lr}
		pGPIO[port].DIR |= 1UL << bit;
 144:	1840      	adds	r0, r0, r1
	if (setting) {
 146:	2b00      	cmp	r3, #0
 148:	d107      	bne.n	15a <Chip_GPIO_WriteDirBit+0x1a>
	}
	else {
		pGPIO[port].DIR &= ~(1UL << bit);
 14a:	2101      	movs	r1, #1
 14c:	2480      	movs	r4, #128	; 0x80
 14e:	4091      	lsls	r1, r2
 150:	0224      	lsls	r4, r4, #8
 152:	5903      	ldr	r3, [r0, r4]
 154:	438b      	bics	r3, r1
 156:	5103      	str	r3, [r0, r4]
	}
}
 158:	bd10      	pop	{r4, pc}
		pGPIO[port].DIR |= 1UL << bit;
 15a:	2301      	movs	r3, #1
 15c:	2180      	movs	r1, #128	; 0x80
 15e:	4093      	lsls	r3, r2
 160:	0209      	lsls	r1, r1, #8
 162:	5844      	ldr	r4, [r0, r1]
 164:	4323      	orrs	r3, r4
 166:	5043      	str	r3, [r0, r1]
 168:	e7f6      	b.n	158 <Chip_GPIO_WriteDirBit+0x18>
 16a:	46c0      	nop			; (mov r8, r8)

0000016c <Chip_Clock_GetMainClockRate>:
/* Return main clock rate */
uint32_t Chip_Clock_GetMainClockRate(void)
{
	uint32_t clkRate = 0;

	switch ((CHIP_SYSCTL_MAINCLKSRC_T) (LPC_SYSCTL->MAINCLKSEL & 0x3)) {
 16c:	2103      	movs	r1, #3
{
 16e:	b500      	push	{lr}
	switch ((CHIP_SYSCTL_MAINCLKSRC_T) (LPC_SYSCTL->MAINCLKSEL & 0x3)) {
 170:	4a1b      	ldr	r2, [pc, #108]	; (1e0 <Chip_Clock_GetMainClockRate+0x74>)
{
 172:	b083      	sub	sp, #12
	switch ((CHIP_SYSCTL_MAINCLKSRC_T) (LPC_SYSCTL->MAINCLKSEL & 0x3)) {
 174:	6f13      	ldr	r3, [r2, #112]	; 0x70
 176:	400b      	ands	r3, r1
 178:	2b02      	cmp	r3, #2
 17a:	d01c      	beq.n	1b6 <Chip_Clock_GetMainClockRate+0x4a>
 17c:	2b03      	cmp	r3, #3
 17e:	d00c      	beq.n	19a <Chip_Clock_GetMainClockRate+0x2e>
 180:	2b01      	cmp	r3, #1
 182:	d002      	beq.n	18a <Chip_Clock_GetMainClockRate+0x1e>
	case SYSCTL_MAINCLKSRC_IRC:
		clkRate = Chip_Clock_GetIntOscRate();
 184:	4817      	ldr	r0, [pc, #92]	; (1e4 <Chip_Clock_GetMainClockRate+0x78>)
		clkRate = Chip_Clock_GetSystemPLLOutClockRate();
		break;
	}

	return clkRate;
}
 186:	b003      	add	sp, #12
 188:	bd00      	pop	{pc}
	switch ((CHIP_SYSCTL_PLLCLKSRC_T) (LPC_SYSCTL->SYSPLLCLKSEL & 0x3)) {
 18a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 18c:	4019      	ands	r1, r3
 18e:	d0f9      	beq.n	184 <Chip_Clock_GetMainClockRate+0x18>
 190:	2901      	cmp	r1, #1
 192:	d123      	bne.n	1dc <Chip_Clock_GetMainClockRate+0x70>
 * @brief	Returns the main oscillator clock rate
 * @return	main oscillator clock rate
 */
STATIC INLINE uint32_t Chip_Clock_GetMainOscRate(void)
{
	return OscRateIn;
 194:	4b14      	ldr	r3, [pc, #80]	; (1e8 <Chip_Clock_GetMainClockRate+0x7c>)
 196:	6818      	ldr	r0, [r3, #0]
 198:	e7f5      	b.n	186 <Chip_Clock_GetMainClockRate+0x1a>
	return Chip_Clock_GetPLLFreq(LPC_SYSCTL->SYSPLLCTRL,
 19a:	6891      	ldr	r1, [r2, #8]
	switch ((CHIP_SYSCTL_PLLCLKSRC_T) (LPC_SYSCTL->SYSPLLCLKSEL & 0x3)) {
 19c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 19e:	4013      	ands	r3, r2
 1a0:	d016      	beq.n	1d0 <Chip_Clock_GetMainClockRate+0x64>
 1a2:	2b01      	cmp	r3, #1
 1a4:	d11a      	bne.n	1dc <Chip_Clock_GetMainClockRate+0x70>
 1a6:	201f      	movs	r0, #31
 1a8:	4b0f      	ldr	r3, [pc, #60]	; (1e8 <Chip_Clock_GetMainClockRate+0x7c>)
 1aa:	4008      	ands	r0, r1
 1ac:	681b      	ldr	r3, [r3, #0]
 1ae:	3001      	adds	r0, #1
 1b0:	9301      	str	r3, [sp, #4]
 1b2:	4358      	muls	r0, r3
 1b4:	e7e7      	b.n	186 <Chip_Clock_GetMainClockRate+0x1a>
	div = reg & 0x1F;
 1b6:	211f      	movs	r1, #31
	return Chip_Clock_GetWDTLFORate(LPC_SYSCTL->WDTOSCCTRL);
 1b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
	clk = (CHIP_WDTLFO_OSC_T) ((reg >> 5) & 0xF);
 1ba:	05d3      	lsls	r3, r2, #23
	div = reg & 0x1F;
 1bc:	4011      	ands	r1, r2
	return wdtOSCRate[clk] / ((div + 1) << 1);
 1be:	0f1b      	lsrs	r3, r3, #28
 1c0:	4a0a      	ldr	r2, [pc, #40]	; (1ec <Chip_Clock_GetMainClockRate+0x80>)
 1c2:	009b      	lsls	r3, r3, #2
 1c4:	3101      	adds	r1, #1
 1c6:	0049      	lsls	r1, r1, #1
 1c8:	5898      	ldr	r0, [r3, r2]
 1ca:	f000 fa79 	bl	6c0 <__udivsi3>
		break;
 1ce:	e7da      	b.n	186 <Chip_Clock_GetMainClockRate+0x1a>
 1d0:	231f      	movs	r3, #31
 1d2:	4804      	ldr	r0, [pc, #16]	; (1e4 <Chip_Clock_GetMainClockRate+0x78>)
 1d4:	400b      	ands	r3, r1
 1d6:	3301      	adds	r3, #1
 1d8:	4358      	muls	r0, r3
 1da:	e7d4      	b.n	186 <Chip_Clock_GetMainClockRate+0x1a>
		clkRate = 0;
 1dc:	2000      	movs	r0, #0
	return clkRate;
 1de:	e7d2      	b.n	186 <Chip_Clock_GetMainClockRate+0x1a>
 1e0:	40048000 	.word	0x40048000
 1e4:	00b71b00 	.word	0x00b71b00
 1e8:	00000a08 	.word	0x00000a08
 1ec:	00000984 	.word	0x00000984

000001f0 <Chip_Clock_GetSystemClockRate>:

/* Return system clock rate */
uint32_t Chip_Clock_GetSystemClockRate(void)
{
 1f0:	b510      	push	{r4, lr}
	/* No point in checking for divide by 0 */
	return Chip_Clock_GetMainClockRate() / LPC_SYSCTL->SYSAHBCLKDIV;
 1f2:	f7ff ffbb 	bl	16c <Chip_Clock_GetMainClockRate>
 1f6:	4b02      	ldr	r3, [pc, #8]	; (200 <Stack_Size>)
 1f8:	6f99      	ldr	r1, [r3, #120]	; 0x78
 1fa:	f000 fa61 	bl	6c0 <__udivsi3>
}
 1fe:	bd10      	pop	{r4, pc}
 200:	40048000 	.word	0x40048000

00000204 <Chip_UART_Init>:
	LPC_SYSCTL->SYSAHBCLKCTRL |= (1 << clk);
 204:	2180      	movs	r1, #128	; 0x80
 206:	2280      	movs	r2, #128	; 0x80
 208:	4b07      	ldr	r3, [pc, #28]	; (228 <Chip_UART_Init+0x24>)
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
 20a:	b510      	push	{r4, lr}
 20c:	585c      	ldr	r4, [r3, r1]
 20e:	0152      	lsls	r2, r2, #5
 210:	4322      	orrs	r2, r4
 212:	505a      	str	r2, [r3, r1]
	LPC_SYSCTL->USARTCLKDIV  = div;
 214:	2298      	movs	r2, #152	; 0x98
 216:	397f      	subs	r1, #127	; 0x7f
 218:	5099      	str	r1, [r3, r2]
 *			with a RX trip level of 8 characters, use something like
 *			(UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
	pUART->FCR = fcr;
 21a:	2307      	movs	r3, #7
 21c:	6083      	str	r3, [r0, #8]
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
 21e:	3b04      	subs	r3, #4
 220:	60c3      	str	r3, [r0, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
 222:	330d      	adds	r3, #13
 224:	6283      	str	r3, [r0, #40]	; 0x28
}
 226:	bd10      	pop	{r4, pc}
 228:	40048000 	.word	0x40048000

0000022c <Chip_UART_SendBlocking>:
	return sent;
}

/* Transmit a byte array through the UART peripheral (blocking) */
int Chip_UART_SendBlocking(LPC_USART_T *pUART, const void *data, int numBytes)
{
 22c:	b570      	push	{r4, r5, r6, lr}
	int pass, sent = 0;
	uint8_t *p8 = (uint8_t *) data;

	while (numBytes > 0) {
 22e:	2600      	movs	r6, #0
		   ((Chip_UART_ReadLineStatus(pUART) & UART_LSR_THRE) != 0)) {
 230:	2520      	movs	r5, #32
	while (numBytes > 0) {
 232:	2a00      	cmp	r2, #0
 234:	dd0d      	ble.n	252 <Chip_UART_SendBlocking+0x26>
 236:	2300      	movs	r3, #0
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
 238:	6944      	ldr	r4, [r0, #20]
	while ((sent < numBytes) &&
 23a:	4225      	tst	r5, r4
 23c:	d004      	beq.n	248 <Chip_UART_SendBlocking+0x1c>
	pUART->THR = (uint32_t) data;
 23e:	5ccc      	ldrb	r4, [r1, r3]
		sent++;
 240:	3301      	adds	r3, #1
 242:	6004      	str	r4, [r0, #0]
	while ((sent < numBytes) &&
 244:	429a      	cmp	r2, r3
 246:	dcf7      	bgt.n	238 <Chip_UART_SendBlocking+0xc>
		pass = Chip_UART_Send(pUART, p8, numBytes);
		numBytes -= pass;
 248:	1ad2      	subs	r2, r2, r3
		sent += pass;
 24a:	18f6      	adds	r6, r6, r3
		p8 += pass;
 24c:	18c9      	adds	r1, r1, r3
	while (numBytes > 0) {
 24e:	2a00      	cmp	r2, #0
 250:	dcf1      	bgt.n	236 <Chip_UART_SendBlocking+0xa>
	}

	return sent;
}
 252:	0030      	movs	r0, r6
 254:	bd70      	pop	{r4, r5, r6, pc}
 256:	46c0      	nop			; (mov r8, r8)

00000258 <Chip_UART_Read>:

/* Read data through the UART peripheral (non-blocking) */
int Chip_UART_Read(LPC_USART_T *pUART, void *data, int numBytes)
{
 258:	b530      	push	{r4, r5, lr}
	int readBytes = 0;
	uint8_t *p8 = (uint8_t *) data;

	/* Send until the transmit FIFO is full or out of bytes */
	while ((readBytes < numBytes) &&
 25a:	2a00      	cmp	r2, #0
 25c:	dd0f      	ble.n	27e <Chip_UART_Read+0x26>
	return pUART->LSR;
 25e:	6943      	ldr	r3, [r0, #20]
 260:	07db      	lsls	r3, r3, #31
 262:	d50c      	bpl.n	27e <Chip_UART_Read+0x26>
 264:	2300      	movs	r3, #0
		   ((Chip_UART_ReadLineStatus(pUART) & UART_LSR_RDR) != 0)) {
 266:	2501      	movs	r5, #1
 268:	e002      	b.n	270 <Chip_UART_Read+0x18>
 26a:	6944      	ldr	r4, [r0, #20]
	while ((readBytes < numBytes) &&
 26c:	4225      	tst	r5, r4
 26e:	d004      	beq.n	27a <Chip_UART_Read+0x22>
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
 270:	6804      	ldr	r4, [r0, #0]
 272:	54cc      	strb	r4, [r1, r3]
		*p8 = Chip_UART_ReadByte(pUART);
		p8++;
		readBytes++;
 274:	3301      	adds	r3, #1
	while ((readBytes < numBytes) &&
 276:	429a      	cmp	r2, r3
 278:	d1f7      	bne.n	26a <Chip_UART_Read+0x12>
	}

	return readBytes;
}
 27a:	0018      	movs	r0, r3
 27c:	bd30      	pop	{r4, r5, pc}
	int readBytes = 0;
 27e:	2300      	movs	r3, #0
	return readBytes;
 280:	e7fb      	b.n	27a <Chip_UART_Read+0x22>
 282:	46c0      	nop			; (mov r8, r8)

00000284 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
 284:	b570      	push	{r4, r5, r6, lr}
 286:	000e      	movs	r6, r1
 288:	0004      	movs	r4, r0
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetMainClockRate();
 28a:	f7ff ff6f 	bl	16c <Chip_Clock_GetMainClockRate>
	div = clkin / (baudrate * 16);
 28e:	0131      	lsls	r1, r6, #4
	clkin = Chip_Clock_GetMainClockRate();
 290:	0005      	movs	r5, r0
	div = clkin / (baudrate * 16);
 292:	f000 fa15 	bl	6c0 <__udivsi3>
 296:	23ff      	movs	r3, #255	; 0xff
 298:	001e      	movs	r6, r3
 29a:	0001      	movs	r1, r0
 29c:	4006      	ands	r6, r0
	pUART->LCR |= UART_LCR_DLAB_EN;
 29e:	2080      	movs	r0, #128	; 0x80
 2a0:	68e2      	ldr	r2, [r4, #12]
 2a2:	4302      	orrs	r2, r0
 2a4:	60e2      	str	r2, [r4, #12]

	/* High and low halves of the divider */
	divh = div / 256;
 2a6:	0a0a      	lsrs	r2, r1, #8
 2a8:	4013      	ands	r3, r2
	pUART->DLL = (uint32_t) dll;
 2aa:	6026      	str	r6, [r4, #0]
	pUART->DLM = (uint32_t) dlm;
 2ac:	6063      	str	r3, [r4, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
 2ae:	68e3      	ldr	r3, [r4, #12]
 2b0:	4383      	bics	r3, r0
 2b2:	60e3      	str	r3, [r4, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return clkin / div;
 2b4:	0028      	movs	r0, r5
 2b6:	f000 fa03 	bl	6c0 <__udivsi3>
}
 2ba:	bd70      	pop	{r4, r5, r6, pc}

000002bc <CAN_error>:
/*	CAN error callback */
/*	Function is executed by the Callback handler after
    an error has occurred on the CAN bus */
void CAN_error(uint32_t error_info) {
	can_error_info = error_info;
	can_error_flag = true;
 2bc:	2201      	movs	r2, #1
	can_error_info = error_info;
 2be:	4b02      	ldr	r3, [pc, #8]	; (2c8 <CAN_error+0xc>)
 2c0:	6018      	str	r0, [r3, #0]
	can_error_flag = true;
 2c2:	4b02      	ldr	r3, [pc, #8]	; (2cc <CAN_error+0x10>)
 2c4:	701a      	strb	r2, [r3, #0]
}
 2c6:	4770      	bx	lr
 2c8:	1000010c 	.word	0x1000010c
 2cc:	10000108 	.word	0x10000108

000002d0 <CAN_tx>:
void CAN_tx(uint8_t msg_obj_num) {
 2d0:	b510      	push	{r4, lr}
    Chip_UART_SendBlocking(LPC_USART, transmit_msg, strlen(transmit_msg));
 2d2:	2213      	movs	r2, #19
 2d4:	4902      	ldr	r1, [pc, #8]	; (2e0 <CAN_tx+0x10>)
 2d6:	4803      	ldr	r0, [pc, #12]	; (2e4 <CAN_tx+0x14>)
 2d8:	f7ff ffa8 	bl	22c <Chip_UART_SendBlocking>
}
 2dc:	bd10      	pop	{r4, pc}
 2de:	46c0      	nop			; (mov r8, r8)
 2e0:	000009f4 	.word	0x000009f4
 2e4:	40008000 	.word	0x40008000

000002e8 <CAN_rx>:
void CAN_rx(uint8_t msg_obj_num) {
 2e8:	b510      	push	{r4, lr}
 2ea:	0004      	movs	r4, r0
	msg_obj.msgobj = msg_obj_num;
 2ec:	4807      	ldr	r0, [pc, #28]	; (30c <CAN_rx+0x24>)
	LPC_CCAN_API->can_receive(&msg_obj);
 2ee:	4b08      	ldr	r3, [pc, #32]	; (310 <CAN_rx+0x28>)
	msg_obj.msgobj = msg_obj_num;
 2f0:	7444      	strb	r4, [r0, #17]
	LPC_CCAN_API->can_receive(&msg_obj);
 2f2:	681b      	ldr	r3, [r3, #0]
 2f4:	689b      	ldr	r3, [r3, #8]
 2f6:	68db      	ldr	r3, [r3, #12]
 2f8:	4798      	blx	r3
	if (msg_obj_num == 1) {
 2fa:	2c01      	cmp	r4, #1
 2fc:	d000      	beq.n	300 <CAN_rx+0x18>
}
 2fe:	bd10      	pop	{r4, pc}
        Chip_UART_SendBlocking(LPC_USART, response_msg, strlen(response_msg));
 300:	220e      	movs	r2, #14
 302:	4904      	ldr	r1, [pc, #16]	; (314 <CAN_rx+0x2c>)
 304:	4804      	ldr	r0, [pc, #16]	; (318 <CAN_rx+0x30>)
 306:	f7ff ff91 	bl	22c <Chip_UART_SendBlocking>
}
 30a:	e7f8      	b.n	2fe <CAN_rx+0x16>
 30c:	10000258 	.word	0x10000258
 310:	1fff1ff8 	.word	0x1fff1ff8
 314:	000009e4 	.word	0x000009e4
 318:	40008000 	.word	0x40008000

0000031c <SysTick_Handler>:
	msTicks++;
 31c:	4a02      	ldr	r2, [pc, #8]	; (328 <SysTick_Handler+0xc>)
 31e:	6813      	ldr	r3, [r2, #0]
 320:	3301      	adds	r3, #1
 322:	6013      	str	r3, [r2, #0]
}
 324:	4770      	bx	lr
 326:	46c0      	nop			; (mov r8, r8)
 328:	10000250 	.word	0x10000250

0000032c <baudrateCalculate>:
	LPC_SYSCTL->SYSAHBCLKCTRL |= (1 << clk);
 32c:	2280      	movs	r2, #128	; 0x80
 32e:	2380      	movs	r3, #128	; 0x80
{
 330:	b5f0      	push	{r4, r5, r6, r7, lr}
 332:	46c6      	mov	lr, r8
 334:	0005      	movs	r5, r0
 336:	000c      	movs	r4, r1
 338:	4920      	ldr	r1, [pc, #128]	; (3bc <baudrateCalculate+0x90>)
 33a:	029b      	lsls	r3, r3, #10
 33c:	5888      	ldr	r0, [r1, r2]
 33e:	b500      	push	{lr}
 340:	4303      	orrs	r3, r0
 342:	508b      	str	r3, [r1, r2]
	pClk = Chip_Clock_GetMainClockRate();
 344:	f7ff ff12 	bl	16c <Chip_Clock_GetMainClockRate>
	clk_per_bit = pClk / baud_rate;
 348:	0029      	movs	r1, r5
 34a:	f000 f9b9 	bl	6c0 <__udivsi3>
	for (div = 0; div <= 15; div++) {
 34e:	2300      	movs	r3, #0
	clk_per_bit = pClk / baud_rate;
 350:	2703      	movs	r7, #3
	for (div = 0; div <= 15; div++) {
 352:	4698      	mov	r8, r3
 354:	2301      	movs	r3, #1
 356:	4443      	add	r3, r8
 358:	469c      	mov	ip, r3
{
 35a:	003e      	movs	r6, r7
 35c:	0019      	movs	r1, r3
 35e:	2501      	movs	r5, #1
 360:	0032      	movs	r2, r6
 362:	2303      	movs	r3, #3
				if (clk_per_bit == (segs * quanta * (div + 1))) {
 364:	4290      	cmp	r0, r2
 366:	d00e      	beq.n	386 <baudrateCalculate+0x5a>
			for (segs = 3; segs <= 17; segs++) {
 368:	3301      	adds	r3, #1
 36a:	1852      	adds	r2, r2, r1
 36c:	2b12      	cmp	r3, #18
 36e:	d1f9      	bne.n	364 <baudrateCalculate+0x38>
		for (quanta = 1; quanta <= 32; quanta++) {
 370:	3501      	adds	r5, #1
 372:	4461      	add	r1, ip
 374:	19f6      	adds	r6, r6, r7
 376:	2d21      	cmp	r5, #33	; 0x21
 378:	d1f2      	bne.n	360 <baudrateCalculate+0x34>
	for (div = 0; div <= 15; div++) {
 37a:	4663      	mov	r3, ip
 37c:	3703      	adds	r7, #3
 37e:	2b10      	cmp	r3, #16
 380:	d017      	beq.n	3b2 <baudrateCalculate+0x86>
 382:	46e0      	mov	r8, ip
 384:	e7e6      	b.n	354 <baudrateCalculate+0x28>
					can_api_timing_cfg[0] = div;
 386:	4642      	mov	r2, r8
					segs -= 3;
 388:	3b03      	subs	r3, #3
					seg1 = segs / 2;
 38a:	0859      	lsrs	r1, r3, #1
					can_api_timing_cfg[0] = div;
 38c:	6022      	str	r2, [r4, #0]
					can_sjw = seg1 > 3 ? 3 : seg1;
 38e:	000a      	movs	r2, r1
 390:	2903      	cmp	r1, #3
 392:	d811      	bhi.n	3b8 <baudrateCalculate+0x8c>
						((quanta - 1) & 0x3F) | (can_sjw & 0x03) << 6 | (seg1 & 0x0F) << 8 | (seg2 & 0x07) << 12;
 394:	26f0      	movs	r6, #240	; 0xf0
 396:	0208      	lsls	r0, r1, #8
					seg2 = segs - seg1;
 398:	1a5b      	subs	r3, r3, r1
						((quanta - 1) & 0x3F) | (can_sjw & 0x03) << 6 | (seg1 & 0x0F) << 8 | (seg2 & 0x07) << 12;
 39a:	21e0      	movs	r1, #224	; 0xe0
 39c:	0136      	lsls	r6, r6, #4
 39e:	0192      	lsls	r2, r2, #6
 3a0:	4030      	ands	r0, r6
 3a2:	4302      	orrs	r2, r0
 3a4:	3d01      	subs	r5, #1
 3a6:	031b      	lsls	r3, r3, #12
 3a8:	01c9      	lsls	r1, r1, #7
 3aa:	432a      	orrs	r2, r5
 3ac:	400b      	ands	r3, r1
 3ae:	4313      	orrs	r3, r2
					can_api_timing_cfg[1] =
 3b0:	6063      	str	r3, [r4, #4]
}
 3b2:	bc04      	pop	{r2}
 3b4:	4690      	mov	r8, r2
 3b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
					can_sjw = seg1 > 3 ? 3 : seg1;
 3b8:	2203      	movs	r2, #3
 3ba:	e7eb      	b.n	394 <baudrateCalculate+0x68>
 3bc:	40048000 	.word	0x40048000

000003c0 <CAN_IRQHandler>:
 * @return	Nothing
 * @note	The CCAN interrupt handler must be provided by the user application.
 *	It's function is to call the isr() API located in the ROM
 */
void CAN_IRQHandler(void) {
	LPC_CCAN_API->isr();
 3c0:	4b03      	ldr	r3, [pc, #12]	; (3d0 <CAN_IRQHandler+0x10>)
void CAN_IRQHandler(void) {
 3c2:	b510      	push	{r4, lr}
	LPC_CCAN_API->isr();
 3c4:	681b      	ldr	r3, [r3, #0]
 3c6:	689b      	ldr	r3, [r3, #8]
 3c8:	685b      	ldr	r3, [r3, #4]
 3ca:	4798      	blx	r3
}
 3cc:	bd10      	pop	{r4, pc}
 3ce:	46c0      	nop			; (mov r8, r8)
 3d0:	1fff1ff8 	.word	0x1fff1ff8

000003d4 <main>:

int main(void)
{
 3d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 3d6:	46de      	mov	lr, fp
 3d8:	464e      	mov	r6, r9
 3da:	4657      	mov	r7, sl
 3dc:	4645      	mov	r5, r8
 3de:	b5e0      	push	{r5, r6, r7, lr}
 3e0:	b091      	sub	sp, #68	; 0x44

	SystemCoreClockUpdate();
 3e2:	f7ff fea5 	bl	130 <SystemCoreClockUpdate>

	if (SysTick_Config (SystemCoreClock / 1000)) {
 3e6:	21fa      	movs	r1, #250	; 0xfa
 3e8:	4b79      	ldr	r3, [pc, #484]	; (5d0 <main+0x1fc>)
 3ea:	0089      	lsls	r1, r1, #2
 3ec:	6818      	ldr	r0, [r3, #0]
 3ee:	f000 f967 	bl	6c0 <__udivsi3>
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 3f2:	21c0      	movs	r1, #192	; 0xc0
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 3f4:	4a77      	ldr	r2, [pc, #476]	; (5d4 <main+0x200>)
 3f6:	3801      	subs	r0, #1
 3f8:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 3fa:	4877      	ldr	r0, [pc, #476]	; (5d8 <main+0x204>)
 3fc:	0609      	lsls	r1, r1, #24
 3fe:	6a03      	ldr	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 400:	2500      	movs	r5, #0
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 402:	021b      	lsls	r3, r3, #8
 404:	0a1b      	lsrs	r3, r3, #8
 406:	430b      	orrs	r3, r1
 408:	6203      	str	r3, [r0, #32]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 40a:	2307      	movs	r3, #7
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 40c:	6095      	str	r5, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 40e:	6013      	str	r3, [r2, #0]
 * @param	modefunc	: OR'ed values or type IOCON_*
 * @return	Nothing
 */
STATIC INLINE void Chip_IOCON_PinMuxSet(LPC_IOCON_T *pIOCON, CHIP_IOCON_PIO_T pin, uint32_t modefunc)
{
	pIOCON->REG[pin] = modefunc;
 410:	2201      	movs	r2, #1
 412:	4692      	mov	sl, r2
 414:	4651      	mov	r1, sl
 416:	4b71      	ldr	r3, [pc, #452]	; (5dc <main+0x208>)
	//---------------
	//UART
	Chip_IOCON_PinMuxSet(LPC_IOCON, IOCON_PIO1_6, (IOCON_FUNC1 | IOCON_MODE_INACT));/* RXD */
	Chip_IOCON_PinMuxSet(LPC_IOCON, IOCON_PIO1_7, (IOCON_FUNC1 | IOCON_MODE_INACT));/* TXD */

	Chip_UART_Init(LPC_USART);
 418:	4c71      	ldr	r4, [pc, #452]	; (5e0 <main+0x20c>)
 41a:	32a3      	adds	r2, #163	; 0xa3
 41c:	5099      	str	r1, [r3, r2]
 41e:	3204      	adds	r2, #4
 420:	5099      	str	r1, [r3, r2]
 422:	0020      	movs	r0, r4
 424:	f7ff feee 	bl	204 <Chip_UART_Init>
	Chip_UART_SetBaud(LPC_USART, 9600);
 428:	2196      	movs	r1, #150	; 0x96
 42a:	0020      	movs	r0, r4
 42c:	0189      	lsls	r1, r1, #6
 42e:	f7ff ff29 	bl	284 <Chip_UART_SetBaud>
	pUART->LCR = config;
 432:	2303      	movs	r3, #3
 434:	60e3      	str	r3, [r4, #12]
	pUART->FCR = fcr;
 436:	337e      	adds	r3, #126	; 0x7e
 438:	60a3      	str	r3, [r4, #8]
	pUART->TER1 = UART_TER1_TXEN;
 43a:	3b01      	subs	r3, #1
 43c:	6323      	str	r3, [r4, #48]	; 0x30
	Chip_UART_ConfigData(LPC_USART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));
	Chip_UART_SetupFIFOS(LPC_USART, (UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2));
	Chip_UART_TXEnable(LPC_USART);
	//---------------

	DEBUG_Print("Started up\n\r");
 43e:	220c      	movs	r2, #12
 440:	4968      	ldr	r1, [pc, #416]	; (5e4 <main+0x210>)
 442:	0020      	movs	r0, r4
 444:	f7ff fef2 	bl	22c <Chip_UART_SendBlocking>
	Chip_GPIO_WriteDirBit(LPC_GPIO, port, pin, true); //setoutput
 448:	20a0      	movs	r0, #160	; 0xa0
 44a:	2301      	movs	r3, #1
 44c:	2208      	movs	r2, #8
 44e:	2102      	movs	r1, #2
 450:	05c0      	lsls	r0, r0, #23
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
 452:	2780      	movs	r7, #128	; 0x80
 454:	f7ff fe74 	bl	140 <Chip_GPIO_WriteDirBit>
 458:	20a0      	movs	r0, #160	; 0xa0
 45a:	4c63      	ldr	r4, [pc, #396]	; (5e8 <main+0x214>)
 45c:	00ff      	lsls	r7, r7, #3
 45e:	51e5      	str	r5, [r4, r7]
 460:	2301      	movs	r3, #1
 462:	220a      	movs	r2, #10
 464:	2102      	movs	r1, #2
 466:	05c0      	lsls	r0, r0, #23
 468:	f7ff fe6a 	bl	140 <Chip_GPIO_WriteDirBit>
 46c:	2380      	movs	r3, #128	; 0x80
 46e:	015b      	lsls	r3, r3, #5
 470:	50e5      	str	r5, [r4, r3]
 472:	2380      	movs	r3, #128	; 0x80
 474:	005b      	lsls	r3, r3, #1
 476:	51e3      	str	r3, [r4, r7]
	LED_Write(LED0, true);

	//---------------
	//Ring Buffer

	RingBuffer_Init(&rx_buffer, _rx_buffer, sizeof(CCAN_MSG_OBJ_T), 8);
 478:	4c5c      	ldr	r4, [pc, #368]	; (5ec <main+0x218>)
 47a:	495d      	ldr	r1, [pc, #372]	; (5f0 <main+0x21c>)

	//---------------

	uint32_t CanApiClkInitTable[2];
	/* Publish CAN Callback Functions */
	CCAN_CALLBACKS_T callbacks = {
 47c:	af08      	add	r7, sp, #32
	RingBuffer_Init(&rx_buffer, _rx_buffer, sizeof(CCAN_MSG_OBJ_T), 8);
 47e:	3bf8      	subs	r3, #248	; 0xf8
 480:	2218      	movs	r2, #24
 482:	0020      	movs	r0, r4
 484:	f7ff fe32 	bl	ec <RingBuffer_Init>
	CCAN_CALLBACKS_T callbacks = {
 488:	003a      	movs	r2, r7
 48a:	4b5a      	ldr	r3, [pc, #360]	; (5f4 <main+0x220>)
 * @param	RingBuff	: Pointer to ring buffer
 * @return	Nothing
 */
STATIC INLINE void RingBuffer_Flush(RINGBUFF_T *RingBuff)
{
	RingBuff->head = RingBuff->tail = 0;
 48c:	6125      	str	r5, [r4, #16]
 48e:	60e5      	str	r5, [r4, #12]
 490:	cb43      	ldmia	r3!, {r0, r1, r6}
 492:	c243      	stmia	r2!, {r0, r1, r6}
 494:	cb43      	ldmia	r3!, {r0, r1, r6}
 496:	c243      	stmia	r2!, {r0, r1, r6}
 498:	cb03      	ldmia	r3!, {r0, r1}
 49a:	c203      	stmia	r2!, {r0, r1}
		NULL,
		NULL,
		NULL,
		NULL,
	};
	baudrateCalculate(TEST_CCAN_BAUD_RATE, CanApiClkInitTable);
 49c:	4669      	mov	r1, sp
 49e:	4856      	ldr	r0, [pc, #344]	; (5f8 <main+0x224>)
 4a0:	f7ff ff44 	bl	32c <baudrateCalculate>

	LPC_CCAN_API->init_can(&CanApiClkInitTable[0], TRUE);
 4a4:	4b55      	ldr	r3, [pc, #340]	; (5fc <main+0x228>)
 4a6:	2101      	movs	r1, #1
 4a8:	4698      	mov	r8, r3
 4aa:	681b      	ldr	r3, [r3, #0]
 4ac:	4668      	mov	r0, sp
 4ae:	689b      	ldr	r3, [r3, #8]
 4b0:	681b      	ldr	r3, [r3, #0]
 4b2:	4798      	blx	r3
	/* Configure the CAN callback functions */
	LPC_CCAN_API->config_calb(&callbacks);
 4b4:	4643      	mov	r3, r8
 4b6:	681b      	ldr	r3, [r3, #0]
 4b8:	0038      	movs	r0, r7
 4ba:	689b      	ldr	r3, [r3, #8]
 4bc:	69db      	ldr	r3, [r3, #28]
 4be:	4798      	blx	r3
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
 4c0:	2280      	movs	r2, #128	; 0x80
 4c2:	4b4f      	ldr	r3, [pc, #316]	; (600 <main+0x22c>)
 4c4:	0192      	lsls	r2, r2, #6
 4c6:	601a      	str	r2, [r3, #0]
	// 	uint8_t   msgobj;
	// } CCAN_MSG_OBJ_T;

	/* Configure message object 1 to only ID 0x600 */
	// THIS IS MSG OBJ ID FOR READING MESSAGES
	msg_obj.msgobj = 1;
 4c8:	4b4e      	ldr	r3, [pc, #312]	; (604 <main+0x230>)
 4ca:	4652      	mov	r2, sl
 4cc:	4699      	mov	r9, r3
 4ce:	745a      	strb	r2, [r3, #17]
	msg_obj.mode_id = 0x600;
 4d0:	23c0      	movs	r3, #192	; 0xc0
 4d2:	464a      	mov	r2, r9
 4d4:	00db      	lsls	r3, r3, #3
 4d6:	6013      	str	r3, [r2, #0]
	msg_obj.mask = 0x7FF;
 4d8:	4b4b      	ldr	r3, [pc, #300]	; (608 <main+0x234>)
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
 4da:	4648      	mov	r0, r9
	msg_obj.mask = 0x7FF;
 4dc:	6053      	str	r3, [r2, #4]
	LPC_CCAN_API->config_rxmsgobj(&msg_obj);
 4de:	4643      	mov	r3, r8
 4e0:	681b      	ldr	r3, [r3, #0]
 4e2:	689b      	ldr	r3, [r3, #8]
 4e4:	689b      	ldr	r3, [r3, #8]
 4e6:	4798      	blx	r3


	can_error_flag = false;
	can_error_info = 0;
 4e8:	4b48      	ldr	r3, [pc, #288]	; (60c <main+0x238>)
	can_error_flag = false;
 4ea:	4f49      	ldr	r7, [pc, #292]	; (610 <main+0x23c>)
	can_error_info = 0;
 4ec:	601d      	str	r5, [r3, #0]
 4ee:	469b      	mov	fp, r3
 4f0:	4b48      	ldr	r3, [pc, #288]	; (614 <main+0x240>)
	can_error_flag = false;
 4f2:	703d      	strb	r5, [r7, #0]
 4f4:	469a      	mov	sl, r3
 4f6:	4b48      	ldr	r3, [pc, #288]	; (618 <main+0x244>)
 4f8:	4d48      	ldr	r5, [pc, #288]	; (61c <main+0x248>)
 4fa:	4698      	mov	r8, r3
 4fc:	4e48      	ldr	r6, [pc, #288]	; (620 <main+0x24c>)

	while (1) {
		if (!RingBuffer_IsEmpty(&rx_buffer)) {
 4fe:	68e3      	ldr	r3, [r4, #12]
 500:	6922      	ldr	r2, [r4, #16]
 502:	4293      	cmp	r3, r2
 504:	d01a      	beq.n	53c <main+0x168>
			CCAN_MSG_OBJ_T temp_msg;
            RingBuffer_Pop(&rx_buffer, &temp_msg);
 506:	a902      	add	r1, sp, #8
 508:	0020      	movs	r0, r4
 50a:	f7ff fdf7 	bl	fc <RingBuffer_Pop>
			// TODO Pop from ring buffer into CCAN_MSG_OBJ
			DEBUG_Print("Received Message ID: 0x");
 50e:	2217      	movs	r2, #23
 510:	4651      	mov	r1, sl
 512:	4833      	ldr	r0, [pc, #204]	; (5e0 <main+0x20c>)
 514:	f7ff fe8a 	bl	22c <Chip_UART_SendBlocking>
			itoa(9999999, str, 16); // replace with message ID of temp_msg
 518:	2210      	movs	r2, #16
 51a:	0029      	movs	r1, r5
 51c:	4841      	ldr	r0, [pc, #260]	; (624 <main+0x250>)
 51e:	f000 f973 	bl	808 <itoa>
			DEBUG_Print(str);
 522:	0028      	movs	r0, r5
 524:	f000 f9b6 	bl	894 <strlen>
 528:	0029      	movs	r1, r5
 52a:	0002      	movs	r2, r0
 52c:	482c      	ldr	r0, [pc, #176]	; (5e0 <main+0x20c>)
 52e:	f7ff fe7d 	bl	22c <Chip_UART_SendBlocking>
			DEBUG_Print("\r\n");
 532:	2202      	movs	r2, #2
 534:	4641      	mov	r1, r8
 536:	482a      	ldr	r0, [pc, #168]	; (5e0 <main+0x20c>)
 538:	f7ff fe78 	bl	22c <Chip_UART_SendBlocking>
		}

		if (can_error_flag) {
 53c:	783b      	ldrb	r3, [r7, #0]
 53e:	2b00      	cmp	r3, #0
 540:	d124      	bne.n	58c <main+0x1b8>

		uint8_t count;
        CCAN_MSG_OBJ_T response;
        const uint8_t *sent_msg = "message sent";
        const uint8_t *error_msg = "wrong keypress";
		if ((count = Chip_UART_Read(LPC_USART, uart_rx_buf, UART_RX_BUFFER_SIZE)) != 0) {
 542:	2208      	movs	r2, #8
 544:	0031      	movs	r1, r6
 546:	4826      	ldr	r0, [pc, #152]	; (5e0 <main+0x20c>)
 548:	f7ff fe86 	bl	258 <Chip_UART_Read>
 54c:	b2c0      	uxtb	r0, r0
 54e:	2800      	cmp	r0, #0
 550:	d0d5      	beq.n	4fe <main+0x12a>
            switch(uart_rx_buf[0]) {
 552:	7833      	ldrb	r3, [r6, #0]
 554:	2b61      	cmp	r3, #97	; 0x61
 556:	d134      	bne.n	5c2 <main+0x1ee>
                case 'a':
                        msg_obj.msgobj = 2;
 558:	464a      	mov	r2, r9
 55a:	3b5f      	subs	r3, #95	; 0x5f
 55c:	7453      	strb	r3, [r2, #17]
                        msg_obj.mode_id = 0x700;
 55e:	23e0      	movs	r3, #224	; 0xe0
 560:	00db      	lsls	r3, r3, #3
 562:	6013      	str	r3, [r2, #0]
                        msg_obj.mask = 0xAA;
 564:	23aa      	movs	r3, #170	; 0xaa
 566:	6053      	str	r3, [r2, #4]
                        LPC_CCAN_API->can_transmit(&response);
 568:	4b24      	ldr	r3, [pc, #144]	; (5fc <main+0x228>)
 56a:	a802      	add	r0, sp, #8
 56c:	681b      	ldr	r3, [r3, #0]
 56e:	689b      	ldr	r3, [r3, #8]
 570:	691b      	ldr	r3, [r3, #16]
 572:	4798      	blx	r3
                        Chip_UART_SendBlocking(LPC_USART, sent_msg, strlen(sent_msg));
 574:	220c      	movs	r2, #12
 576:	492c      	ldr	r1, [pc, #176]	; (628 <main+0x254>)
 578:	4819      	ldr	r0, [pc, #100]	; (5e0 <main+0x20c>)
 57a:	f7ff fe57 	bl	22c <Chip_UART_SendBlocking>
		if (!RingBuffer_IsEmpty(&rx_buffer)) {
 57e:	68e3      	ldr	r3, [r4, #12]
 580:	6922      	ldr	r2, [r4, #16]
 582:	4293      	cmp	r3, r2
 584:	d1bf      	bne.n	506 <main+0x132>
		if (can_error_flag) {
 586:	783b      	ldrb	r3, [r7, #0]
 588:	2b00      	cmp	r3, #0
 58a:	d0da      	beq.n	542 <main+0x16e>
			can_error_flag = false;
 58c:	2300      	movs	r3, #0
			DEBUG_Print("CAN Error: 0b");
 58e:	220d      	movs	r2, #13
 590:	4926      	ldr	r1, [pc, #152]	; (62c <main+0x258>)
 592:	4813      	ldr	r0, [pc, #76]	; (5e0 <main+0x20c>)
			can_error_flag = false;
 594:	703b      	strb	r3, [r7, #0]
			DEBUG_Print("CAN Error: 0b");
 596:	f7ff fe49 	bl	22c <Chip_UART_SendBlocking>
			itoa(can_error_info, str, 2);
 59a:	465b      	mov	r3, fp
 59c:	0029      	movs	r1, r5
 59e:	6818      	ldr	r0, [r3, #0]
 5a0:	2202      	movs	r2, #2
 5a2:	f000 f931 	bl	808 <itoa>
			DEBUG_Print(str);
 5a6:	0028      	movs	r0, r5
 5a8:	f000 f974 	bl	894 <strlen>
 5ac:	0029      	movs	r1, r5
 5ae:	0002      	movs	r2, r0
 5b0:	480b      	ldr	r0, [pc, #44]	; (5e0 <main+0x20c>)
 5b2:	f7ff fe3b 	bl	22c <Chip_UART_SendBlocking>
			DEBUG_Print("\r\n");
 5b6:	2202      	movs	r2, #2
 5b8:	4641      	mov	r1, r8
 5ba:	4809      	ldr	r0, [pc, #36]	; (5e0 <main+0x20c>)
 5bc:	f7ff fe36 	bl	22c <Chip_UART_SendBlocking>
 5c0:	e7bf      	b.n	542 <main+0x16e>
                    break;
                default:
                    Chip_UART_SendBlocking(LPC_USART, error_msg, strlen(error_msg));
 5c2:	220e      	movs	r2, #14
 5c4:	491a      	ldr	r1, [pc, #104]	; (630 <main+0x25c>)
 5c6:	4806      	ldr	r0, [pc, #24]	; (5e0 <main+0x20c>)
 5c8:	f7ff fe30 	bl	22c <Chip_UART_SendBlocking>
	while (1) {
 5cc:	e797      	b.n	4fe <main+0x12a>
 5ce:	46c0      	nop			; (mov r8, r8)
 5d0:	10000100 	.word	0x10000100
 5d4:	e000e010 	.word	0xe000e010
 5d8:	e000ed00 	.word	0xe000ed00
 5dc:	40044000 	.word	0x40044000
 5e0:	40008000 	.word	0x40008000
 5e4:	00000a0c 	.word	0x00000a0c
 5e8:	50020000 	.word	0x50020000
 5ec:	10000110 	.word	0x10000110
 5f0:	10000190 	.word	0x10000190
 5f4:	000009c4 	.word	0x000009c4
 5f8:	0007a120 	.word	0x0007a120
 5fc:	1fff1ff8 	.word	0x1fff1ff8
 600:	e000e100 	.word	0xe000e100
 604:	10000258 	.word	0x10000258
 608:	000007ff 	.word	0x000007ff
 60c:	1000010c 	.word	0x1000010c
 610:	10000108 	.word	0x10000108
 614:	00000a1c 	.word	0x00000a1c
 618:	00000a34 	.word	0x00000a34
 61c:	10000124 	.word	0x10000124
 620:	10000188 	.word	0x10000188
 624:	0098967f 	.word	0x0098967f
 628:	00000a48 	.word	0x00000a48
 62c:	00000a38 	.word	0x00000a38
 630:	00000a58 	.word	0x00000a58

00000634 <SystemInit>:
#if (CLOCK_SETUP)                                 /* Clock Setup              */
#if (SYSCLK_SETUP)                                /* System Clock Setup       */
#if (SYSOSC_SETUP)                                /* System Oscillator Setup  */
  uint32_t i;

  LPC_SYSCTL->PDRUNCFG     &= ~(1 << 5);          /* Power-up System Osc      */
 634:	218e      	movs	r1, #142	; 0x8e
 636:	2020      	movs	r0, #32
 638:	4b1f      	ldr	r3, [pc, #124]	; (6b8 <SystemInit+0x84>)
 63a:	0089      	lsls	r1, r1, #2
 63c:	585a      	ldr	r2, [r3, r1]
{
 63e:	b510      	push	{r4, lr}
  LPC_SYSCTL->PDRUNCFG     &= ~(1 << 5);          /* Power-up System Osc      */
 640:	4382      	bics	r2, r0
 642:	505a      	str	r2, [r3, r1]
  LPC_SYSCTL->SYSOSCCTRL    = SYSOSCCTRL_Val;
 644:	2200      	movs	r2, #0
 646:	621a      	str	r2, [r3, #32]
 648:	23c8      	movs	r3, #200	; 0xc8

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 64a:	46c0      	nop			; (mov r8, r8)
 64c:	3b01      	subs	r3, #1
  for (i = 0; i < 200; i++) __NOP();
 64e:	2b00      	cmp	r3, #0
 650:	d1fb      	bne.n	64a <SystemInit+0x16>
  LPC_SYSCTL->SYSPLLCLKSEL  = SYSPLLCLKSEL_Val;   /* Select PLL Input         */
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x1;               /* Update Clock Source      */
 652:	2101      	movs	r1, #1
  LPC_SYSCTL->SYSPLLCLKSEL  = SYSPLLCLKSEL_Val;   /* Select PLL Input         */
 654:	4a18      	ldr	r2, [pc, #96]	; (6b8 <SystemInit+0x84>)
 656:	6413      	str	r3, [r2, #64]	; 0x40
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x1;               /* Update Clock Source      */
 658:	6451      	str	r1, [r2, #68]	; 0x44
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x0;               /* Toggle Update Register   */
 65a:	6453      	str	r3, [r2, #68]	; 0x44
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x1;
 65c:	6451      	str	r1, [r2, #68]	; 0x44
  while (!(LPC_SYSCTL->SYSPLLCLKUEN & 0x1));     /* Wait Until Updated       */
 65e:	6c53      	ldr	r3, [r2, #68]	; 0x44
 660:	4219      	tst	r1, r3
 662:	d0fc      	beq.n	65e <SystemInit+0x2a>
#if (SYSPLL_SETUP)                                /* System PLL Setup         */
  LPC_SYSCTL->SYSPLLCTRL    = SYSPLLCTRL_Val;
 664:	2361      	movs	r3, #97	; 0x61
  LPC_SYSCTL->PDRUNCFG     &= ~(1 << 7);          /* Power-up SYSPLL          */
 666:	218e      	movs	r1, #142	; 0x8e
 668:	2080      	movs	r0, #128	; 0x80
  LPC_SYSCTL->SYSPLLCTRL    = SYSPLLCTRL_Val;
 66a:	6093      	str	r3, [r2, #8]
  LPC_SYSCTL->PDRUNCFG     &= ~(1 << 7);          /* Power-up SYSPLL          */
 66c:	0089      	lsls	r1, r1, #2
 66e:	5853      	ldr	r3, [r2, r1]
 670:	4383      	bics	r3, r0
 672:	5053      	str	r3, [r2, r1]
  while (!(LPC_SYSCTL->SYSPLLSTAT & 0x1));	      /* Wait Until PLL Locked    */
 674:	2101      	movs	r1, #1
 676:	4a10      	ldr	r2, [pc, #64]	; (6b8 <SystemInit+0x84>)
 678:	68d3      	ldr	r3, [r2, #12]
 67a:	4219      	tst	r1, r3
 67c:	d0fc      	beq.n	678 <SystemInit+0x44>
  LPC_SYSCTL->WDTOSCCTRL    = WDTOSCCTRL_Val;
  LPC_SYSCTL->PDRUNCFG     &= ~(1 << 6);          /* Power-up WDT Clock       */
#endif
  LPC_SYSCTL->MAINCLKSEL    = MAINCLKSEL_Val;     /* Select PLL Clock Output  */
  LPC_SYSCTL->MAINCLKUEN    = 0x1;               /* Update MCLK Clock Source */
  LPC_SYSCTL->MAINCLKUEN    = 0x0;               /* Toggle Update Register   */
 67e:	2300      	movs	r3, #0
  LPC_SYSCTL->MAINCLKSEL    = MAINCLKSEL_Val;     /* Select PLL Clock Output  */
 680:	6711      	str	r1, [r2, #112]	; 0x70
  LPC_SYSCTL->MAINCLKUEN    = 0x1;               /* Update MCLK Clock Source */
 682:	6751      	str	r1, [r2, #116]	; 0x74
  LPC_SYSCTL->MAINCLKUEN    = 0x0;               /* Toggle Update Register   */
 684:	6753      	str	r3, [r2, #116]	; 0x74
  LPC_SYSCTL->MAINCLKUEN    = 0x1;
 686:	6751      	str	r1, [r2, #116]	; 0x74
  while (!(LPC_SYSCTL->MAINCLKUEN & 0x1));       /* Wait Until Updated       */
 688:	2101      	movs	r1, #1
 68a:	4a0b      	ldr	r2, [pc, #44]	; (6b8 <SystemInit+0x84>)
 68c:	6f53      	ldr	r3, [r2, #116]	; 0x74
 68e:	4219      	tst	r1, r3
 690:	d0fc      	beq.n	68c <SystemInit+0x58>
#endif
  LPC_SYSCTL->PDRUNCFG     |=  (1 << 10);         /* Power-down USB PHY       */
 692:	238e      	movs	r3, #142	; 0x8e
 694:	2080      	movs	r0, #128	; 0x80
 696:	009b      	lsls	r3, r3, #2
 698:	58d4      	ldr	r4, [r2, r3]
 69a:	00c0      	lsls	r0, r0, #3
 69c:	4320      	orrs	r0, r4
 69e:	50d0      	str	r0, [r2, r3]
  LPC_SYSCTL->PDRUNCFG     |=  (1 <<  8);         /* Power-down USB PLL       */
 6a0:	2080      	movs	r0, #128	; 0x80
 6a2:	58d4      	ldr	r4, [r2, r3]
 6a4:	0040      	lsls	r0, r0, #1
 6a6:	4320      	orrs	r0, r4
 6a8:	50d0      	str	r0, [r2, r3]

  LPC_SYSCTL->SYSAHBCLKDIV  = SYSAHBCLKDIV_Val;
 6aa:	6791      	str	r1, [r2, #120]	; 0x78
  LPC_SYSCTL->SYSAHBCLKCTRL = AHBCLKCTRL_Val;
 6ac:	3bb9      	subs	r3, #185	; 0xb9
 6ae:	4903      	ldr	r1, [pc, #12]	; (6bc <SystemInit+0x88>)
 6b0:	3bff      	subs	r3, #255	; 0xff
 6b2:	50d1      	str	r1, [r2, r3]
#endif

#if (MEMMAP_SETUP || MEMMAP_INIT)       /* Memory Mapping Setup               */
  LPC_SYSCTL->SYSMEMREMAP = SYSMEMREMAP_Val;
#endif
}
 6b4:	bd10      	pop	{r4, pc}
 6b6:	46c0      	nop			; (mov r8, r8)
 6b8:	40048000 	.word	0x40048000
 6bc:	0001005f 	.word	0x0001005f

000006c0 <__udivsi3>:
 6c0:	2200      	movs	r2, #0
 6c2:	0843      	lsrs	r3, r0, #1
 6c4:	428b      	cmp	r3, r1
 6c6:	d374      	bcc.n	7b2 <__udivsi3+0xf2>
 6c8:	0903      	lsrs	r3, r0, #4
 6ca:	428b      	cmp	r3, r1
 6cc:	d35f      	bcc.n	78e <__udivsi3+0xce>
 6ce:	0a03      	lsrs	r3, r0, #8
 6d0:	428b      	cmp	r3, r1
 6d2:	d344      	bcc.n	75e <__udivsi3+0x9e>
 6d4:	0b03      	lsrs	r3, r0, #12
 6d6:	428b      	cmp	r3, r1
 6d8:	d328      	bcc.n	72c <__udivsi3+0x6c>
 6da:	0c03      	lsrs	r3, r0, #16
 6dc:	428b      	cmp	r3, r1
 6de:	d30d      	bcc.n	6fc <__udivsi3+0x3c>
 6e0:	22ff      	movs	r2, #255	; 0xff
 6e2:	0209      	lsls	r1, r1, #8
 6e4:	ba12      	rev	r2, r2
 6e6:	0c03      	lsrs	r3, r0, #16
 6e8:	428b      	cmp	r3, r1
 6ea:	d302      	bcc.n	6f2 <__udivsi3+0x32>
 6ec:	1212      	asrs	r2, r2, #8
 6ee:	0209      	lsls	r1, r1, #8
 6f0:	d065      	beq.n	7be <__udivsi3+0xfe>
 6f2:	0b03      	lsrs	r3, r0, #12
 6f4:	428b      	cmp	r3, r1
 6f6:	d319      	bcc.n	72c <__udivsi3+0x6c>
 6f8:	e000      	b.n	6fc <__udivsi3+0x3c>
 6fa:	0a09      	lsrs	r1, r1, #8
 6fc:	0bc3      	lsrs	r3, r0, #15
 6fe:	428b      	cmp	r3, r1
 700:	d301      	bcc.n	706 <__udivsi3+0x46>
 702:	03cb      	lsls	r3, r1, #15
 704:	1ac0      	subs	r0, r0, r3
 706:	4152      	adcs	r2, r2
 708:	0b83      	lsrs	r3, r0, #14
 70a:	428b      	cmp	r3, r1
 70c:	d301      	bcc.n	712 <__udivsi3+0x52>
 70e:	038b      	lsls	r3, r1, #14
 710:	1ac0      	subs	r0, r0, r3
 712:	4152      	adcs	r2, r2
 714:	0b43      	lsrs	r3, r0, #13
 716:	428b      	cmp	r3, r1
 718:	d301      	bcc.n	71e <__udivsi3+0x5e>
 71a:	034b      	lsls	r3, r1, #13
 71c:	1ac0      	subs	r0, r0, r3
 71e:	4152      	adcs	r2, r2
 720:	0b03      	lsrs	r3, r0, #12
 722:	428b      	cmp	r3, r1
 724:	d301      	bcc.n	72a <__udivsi3+0x6a>
 726:	030b      	lsls	r3, r1, #12
 728:	1ac0      	subs	r0, r0, r3
 72a:	4152      	adcs	r2, r2
 72c:	0ac3      	lsrs	r3, r0, #11
 72e:	428b      	cmp	r3, r1
 730:	d301      	bcc.n	736 <__udivsi3+0x76>
 732:	02cb      	lsls	r3, r1, #11
 734:	1ac0      	subs	r0, r0, r3
 736:	4152      	adcs	r2, r2
 738:	0a83      	lsrs	r3, r0, #10
 73a:	428b      	cmp	r3, r1
 73c:	d301      	bcc.n	742 <__udivsi3+0x82>
 73e:	028b      	lsls	r3, r1, #10
 740:	1ac0      	subs	r0, r0, r3
 742:	4152      	adcs	r2, r2
 744:	0a43      	lsrs	r3, r0, #9
 746:	428b      	cmp	r3, r1
 748:	d301      	bcc.n	74e <__udivsi3+0x8e>
 74a:	024b      	lsls	r3, r1, #9
 74c:	1ac0      	subs	r0, r0, r3
 74e:	4152      	adcs	r2, r2
 750:	0a03      	lsrs	r3, r0, #8
 752:	428b      	cmp	r3, r1
 754:	d301      	bcc.n	75a <__udivsi3+0x9a>
 756:	020b      	lsls	r3, r1, #8
 758:	1ac0      	subs	r0, r0, r3
 75a:	4152      	adcs	r2, r2
 75c:	d2cd      	bcs.n	6fa <__udivsi3+0x3a>
 75e:	09c3      	lsrs	r3, r0, #7
 760:	428b      	cmp	r3, r1
 762:	d301      	bcc.n	768 <__udivsi3+0xa8>
 764:	01cb      	lsls	r3, r1, #7
 766:	1ac0      	subs	r0, r0, r3
 768:	4152      	adcs	r2, r2
 76a:	0983      	lsrs	r3, r0, #6
 76c:	428b      	cmp	r3, r1
 76e:	d301      	bcc.n	774 <__udivsi3+0xb4>
 770:	018b      	lsls	r3, r1, #6
 772:	1ac0      	subs	r0, r0, r3
 774:	4152      	adcs	r2, r2
 776:	0943      	lsrs	r3, r0, #5
 778:	428b      	cmp	r3, r1
 77a:	d301      	bcc.n	780 <__udivsi3+0xc0>
 77c:	014b      	lsls	r3, r1, #5
 77e:	1ac0      	subs	r0, r0, r3
 780:	4152      	adcs	r2, r2
 782:	0903      	lsrs	r3, r0, #4
 784:	428b      	cmp	r3, r1
 786:	d301      	bcc.n	78c <__udivsi3+0xcc>
 788:	010b      	lsls	r3, r1, #4
 78a:	1ac0      	subs	r0, r0, r3
 78c:	4152      	adcs	r2, r2
 78e:	08c3      	lsrs	r3, r0, #3
 790:	428b      	cmp	r3, r1
 792:	d301      	bcc.n	798 <__udivsi3+0xd8>
 794:	00cb      	lsls	r3, r1, #3
 796:	1ac0      	subs	r0, r0, r3
 798:	4152      	adcs	r2, r2
 79a:	0883      	lsrs	r3, r0, #2
 79c:	428b      	cmp	r3, r1
 79e:	d301      	bcc.n	7a4 <__udivsi3+0xe4>
 7a0:	008b      	lsls	r3, r1, #2
 7a2:	1ac0      	subs	r0, r0, r3
 7a4:	4152      	adcs	r2, r2
 7a6:	0843      	lsrs	r3, r0, #1
 7a8:	428b      	cmp	r3, r1
 7aa:	d301      	bcc.n	7b0 <__udivsi3+0xf0>
 7ac:	004b      	lsls	r3, r1, #1
 7ae:	1ac0      	subs	r0, r0, r3
 7b0:	4152      	adcs	r2, r2
 7b2:	1a41      	subs	r1, r0, r1
 7b4:	d200      	bcs.n	7b8 <__udivsi3+0xf8>
 7b6:	4601      	mov	r1, r0
 7b8:	4152      	adcs	r2, r2
 7ba:	4610      	mov	r0, r2
 7bc:	4770      	bx	lr
 7be:	e7ff      	b.n	7c0 <__udivsi3+0x100>
 7c0:	b501      	push	{r0, lr}
 7c2:	2000      	movs	r0, #0
 7c4:	f000 f806 	bl	7d4 <__aeabi_idiv0>
 7c8:	bd02      	pop	{r1, pc}
 7ca:	46c0      	nop			; (mov r8, r8)

000007cc <__aeabi_uidivmod>:
 7cc:	2900      	cmp	r1, #0
 7ce:	d0f7      	beq.n	7c0 <__udivsi3+0x100>
 7d0:	e776      	b.n	6c0 <__udivsi3>
 7d2:	4770      	bx	lr

000007d4 <__aeabi_idiv0>:
 7d4:	4770      	bx	lr
 7d6:	46c0      	nop			; (mov r8, r8)

000007d8 <__itoa>:
 7d8:	1e93      	subs	r3, r2, #2
 7da:	b510      	push	{r4, lr}
 7dc:	000c      	movs	r4, r1
 7de:	2b22      	cmp	r3, #34	; 0x22
 7e0:	d80e      	bhi.n	800 <__itoa+0x28>
 7e2:	2a0a      	cmp	r2, #10
 7e4:	d005      	beq.n	7f2 <__itoa+0x1a>
 7e6:	2100      	movs	r1, #0
 7e8:	1861      	adds	r1, r4, r1
 7ea:	f000 f885 	bl	8f8 <__utoa>
 7ee:	0020      	movs	r0, r4
 7f0:	bd10      	pop	{r4, pc}
 7f2:	2800      	cmp	r0, #0
 7f4:	daf7      	bge.n	7e6 <__itoa+0xe>
 7f6:	232d      	movs	r3, #45	; 0x2d
 7f8:	4240      	negs	r0, r0
 7fa:	700b      	strb	r3, [r1, #0]
 7fc:	2101      	movs	r1, #1
 7fe:	e7f3      	b.n	7e8 <__itoa+0x10>
 800:	2300      	movs	r3, #0
 802:	2000      	movs	r0, #0
 804:	700b      	strb	r3, [r1, #0]
 806:	e7f3      	b.n	7f0 <__itoa+0x18>

00000808 <itoa>:
 808:	b510      	push	{r4, lr}
 80a:	f7ff ffe5 	bl	7d8 <__itoa>
 80e:	bd10      	pop	{r4, pc}

00000810 <memcpy>:
 810:	b5f0      	push	{r4, r5, r6, r7, lr}
 812:	0005      	movs	r5, r0
 814:	2a0f      	cmp	r2, #15
 816:	d92f      	bls.n	878 <memcpy+0x68>
 818:	000b      	movs	r3, r1
 81a:	4303      	orrs	r3, r0
 81c:	079b      	lsls	r3, r3, #30
 81e:	d134      	bne.n	88a <memcpy+0x7a>
 820:	0016      	movs	r6, r2
 822:	000c      	movs	r4, r1
 824:	0003      	movs	r3, r0
 826:	3e10      	subs	r6, #16
 828:	0935      	lsrs	r5, r6, #4
 82a:	3501      	adds	r5, #1
 82c:	012d      	lsls	r5, r5, #4
 82e:	1945      	adds	r5, r0, r5
 830:	6827      	ldr	r7, [r4, #0]
 832:	601f      	str	r7, [r3, #0]
 834:	6867      	ldr	r7, [r4, #4]
 836:	605f      	str	r7, [r3, #4]
 838:	68a7      	ldr	r7, [r4, #8]
 83a:	609f      	str	r7, [r3, #8]
 83c:	68e7      	ldr	r7, [r4, #12]
 83e:	3410      	adds	r4, #16
 840:	60df      	str	r7, [r3, #12]
 842:	3310      	adds	r3, #16
 844:	429d      	cmp	r5, r3
 846:	d1f3      	bne.n	830 <memcpy+0x20>
 848:	230f      	movs	r3, #15
 84a:	439e      	bics	r6, r3
 84c:	3610      	adds	r6, #16
 84e:	1985      	adds	r5, r0, r6
 850:	1989      	adds	r1, r1, r6
 852:	4013      	ands	r3, r2
 854:	2b03      	cmp	r3, #3
 856:	d91a      	bls.n	88e <memcpy+0x7e>
 858:	1f1e      	subs	r6, r3, #4
 85a:	2300      	movs	r3, #0
 85c:	08b4      	lsrs	r4, r6, #2
 85e:	3401      	adds	r4, #1
 860:	00a4      	lsls	r4, r4, #2
 862:	58cf      	ldr	r7, [r1, r3]
 864:	50ef      	str	r7, [r5, r3]
 866:	3304      	adds	r3, #4
 868:	42a3      	cmp	r3, r4
 86a:	d1fa      	bne.n	862 <memcpy+0x52>
 86c:	2403      	movs	r4, #3
 86e:	43a6      	bics	r6, r4
 870:	1d33      	adds	r3, r6, #4
 872:	4022      	ands	r2, r4
 874:	18c9      	adds	r1, r1, r3
 876:	18ed      	adds	r5, r5, r3
 878:	2a00      	cmp	r2, #0
 87a:	d005      	beq.n	888 <memcpy+0x78>
 87c:	2300      	movs	r3, #0
 87e:	5ccc      	ldrb	r4, [r1, r3]
 880:	54ec      	strb	r4, [r5, r3]
 882:	3301      	adds	r3, #1
 884:	4293      	cmp	r3, r2
 886:	d1fa      	bne.n	87e <memcpy+0x6e>
 888:	bdf0      	pop	{r4, r5, r6, r7, pc}
 88a:	0005      	movs	r5, r0
 88c:	e7f6      	b.n	87c <memcpy+0x6c>
 88e:	001a      	movs	r2, r3
 890:	e7f2      	b.n	878 <memcpy+0x68>
 892:	46c0      	nop			; (mov r8, r8)

00000894 <strlen>:
 894:	b510      	push	{r4, lr}
 896:	0783      	lsls	r3, r0, #30
 898:	d025      	beq.n	8e6 <strlen+0x52>
 89a:	7803      	ldrb	r3, [r0, #0]
 89c:	2b00      	cmp	r3, #0
 89e:	d024      	beq.n	8ea <strlen+0x56>
 8a0:	0003      	movs	r3, r0
 8a2:	2103      	movs	r1, #3
 8a4:	e002      	b.n	8ac <strlen+0x18>
 8a6:	781a      	ldrb	r2, [r3, #0]
 8a8:	2a00      	cmp	r2, #0
 8aa:	d01a      	beq.n	8e2 <strlen+0x4e>
 8ac:	3301      	adds	r3, #1
 8ae:	420b      	tst	r3, r1
 8b0:	d1f9      	bne.n	8a6 <strlen+0x12>
 8b2:	6819      	ldr	r1, [r3, #0]
 8b4:	4a0e      	ldr	r2, [pc, #56]	; (8f0 <strlen+0x5c>)
 8b6:	4c0f      	ldr	r4, [pc, #60]	; (8f4 <strlen+0x60>)
 8b8:	188a      	adds	r2, r1, r2
 8ba:	438a      	bics	r2, r1
 8bc:	4222      	tst	r2, r4
 8be:	d106      	bne.n	8ce <strlen+0x3a>
 8c0:	3304      	adds	r3, #4
 8c2:	6819      	ldr	r1, [r3, #0]
 8c4:	4a0a      	ldr	r2, [pc, #40]	; (8f0 <strlen+0x5c>)
 8c6:	188a      	adds	r2, r1, r2
 8c8:	438a      	bics	r2, r1
 8ca:	4222      	tst	r2, r4
 8cc:	d0f8      	beq.n	8c0 <strlen+0x2c>
 8ce:	001a      	movs	r2, r3
 8d0:	781b      	ldrb	r3, [r3, #0]
 8d2:	2b00      	cmp	r3, #0
 8d4:	d003      	beq.n	8de <strlen+0x4a>
 8d6:	3201      	adds	r2, #1
 8d8:	7811      	ldrb	r1, [r2, #0]
 8da:	2900      	cmp	r1, #0
 8dc:	d1fb      	bne.n	8d6 <strlen+0x42>
 8de:	1a10      	subs	r0, r2, r0
 8e0:	bd10      	pop	{r4, pc}
 8e2:	1a18      	subs	r0, r3, r0
 8e4:	e7fc      	b.n	8e0 <strlen+0x4c>
 8e6:	0003      	movs	r3, r0
 8e8:	e7e3      	b.n	8b2 <strlen+0x1e>
 8ea:	2000      	movs	r0, #0
 8ec:	e7f8      	b.n	8e0 <strlen+0x4c>
 8ee:	46c0      	nop			; (mov r8, r8)
 8f0:	fefefeff 	.word	0xfefefeff
 8f4:	80808080 	.word	0x80808080

000008f8 <__utoa>:
 8f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8fa:	4646      	mov	r6, r8
 8fc:	46d6      	mov	lr, sl
 8fe:	464f      	mov	r7, r9
 900:	b5c0      	push	{r6, r7, lr}
 902:	b08a      	sub	sp, #40	; 0x28
 904:	4690      	mov	r8, r2
 906:	466a      	mov	r2, sp
 908:	4b1d      	ldr	r3, [pc, #116]	; (980 <__utoa+0x88>)
 90a:	000d      	movs	r5, r1
 90c:	0006      	movs	r6, r0
 90e:	cb13      	ldmia	r3!, {r0, r1, r4}
 910:	c213      	stmia	r2!, {r0, r1, r4}
 912:	cb13      	ldmia	r3!, {r0, r1, r4}
 914:	c213      	stmia	r2!, {r0, r1, r4}
 916:	cb13      	ldmia	r3!, {r0, r1, r4}
 918:	c213      	stmia	r2!, {r0, r1, r4}
 91a:	781b      	ldrb	r3, [r3, #0]
 91c:	46ea      	mov	sl, sp
 91e:	7013      	strb	r3, [r2, #0]
 920:	4643      	mov	r3, r8
 922:	3b02      	subs	r3, #2
 924:	002f      	movs	r7, r5
 926:	2400      	movs	r4, #0
 928:	2b22      	cmp	r3, #34	; 0x22
 92a:	d901      	bls.n	930 <__utoa+0x38>
 92c:	e024      	b.n	978 <__utoa+0x80>
 92e:	464c      	mov	r4, r9
 930:	1c63      	adds	r3, r4, #1
 932:	0030      	movs	r0, r6
 934:	4641      	mov	r1, r8
 936:	4699      	mov	r9, r3
 938:	f7ff ff48 	bl	7cc <__aeabi_uidivmod>
 93c:	4653      	mov	r3, sl
 93e:	5c5b      	ldrb	r3, [r3, r1]
 940:	0030      	movs	r0, r6
 942:	703b      	strb	r3, [r7, #0]
 944:	4641      	mov	r1, r8
 946:	f7ff febb 	bl	6c0 <__udivsi3>
 94a:	3701      	adds	r7, #1
 94c:	1e06      	subs	r6, r0, #0
 94e:	d1ee      	bne.n	92e <__utoa+0x36>
 950:	464b      	mov	r3, r9
 952:	54e8      	strb	r0, [r5, r3]
 954:	2300      	movs	r3, #0
 956:	2c00      	cmp	r4, #0
 958:	d007      	beq.n	96a <__utoa+0x72>
 95a:	5cea      	ldrb	r2, [r5, r3]
 95c:	5d29      	ldrb	r1, [r5, r4]
 95e:	54e9      	strb	r1, [r5, r3]
 960:	552a      	strb	r2, [r5, r4]
 962:	3301      	adds	r3, #1
 964:	3c01      	subs	r4, #1
 966:	42a3      	cmp	r3, r4
 968:	dbf7      	blt.n	95a <__utoa+0x62>
 96a:	0028      	movs	r0, r5
 96c:	b00a      	add	sp, #40	; 0x28
 96e:	bc1c      	pop	{r2, r3, r4}
 970:	4690      	mov	r8, r2
 972:	4699      	mov	r9, r3
 974:	46a2      	mov	sl, r4
 976:	bdf0      	pop	{r4, r5, r6, r7, pc}
 978:	702c      	strb	r4, [r5, #0]
 97a:	2000      	movs	r0, #0
 97c:	e7f6      	b.n	96c <__utoa+0x74>
 97e:	46c0      	nop			; (mov r8, r8)
 980:	00000a68 	.word	0x00000a68

00000984 <wdtOSCRate>:
 984:	00000000 000927c0 00100590 00155cc0     .....'.......\..
 994:	001ab3f0 00200b20 00249f00 002932e0     .... . ...$..2).
 9a4:	002dc6c0 00319750 003567e0 00393870     ..-.P.1..g5.p89.
 9b4:	003d0900 00401640 00432380 004630c0     ..=.@.@..#C..0F.
 9c4:	000002e9 000002d1 000002bd 00000000     ................
	...
 9e4:	20746f67 7373656d 65677361 00003120     got messasge 1..
 9f4:	7373656d 20656761 6e617274 74696d73     message transmit
 a04:	00646574                                ted.

00000a08 <OscRateIn>:
 a08:	00b71b00 72617453 20646574 0d0a7075     ....Started up..
 a18:	00000000 65636552 64657669 73654d20     ....Received Mes
 a28:	65676173 3a444920 00783020 00000a0d     sage ID: 0x.....
 a38:	204e4143 6f727245 30203a72 00000062     CAN Error: 0b...
 a48:	7373656d 20656761 746e6573 00000000     message sent....
 a58:	6e6f7277 656b2067 65727079 00007373     wrong keypress..
 a68:	33323130 37363534 62613938 66656463     0123456789abcdef
 a78:	6a696867 6e6d6c6b 7271706f 76757473     ghijklmnopqrstuv
 a88:	7a797877 00000000                       wxyz....
