
bin/blink.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__isr_vector>:
   0:	10002000 	.word	0x10002000
   4:	000000c1 	.word	0x000000c1
   8:	000000e1 	.word	0x000000e1
   c:	000000e3 	.word	0x000000e3
	...
  2c:	000000e5 	.word	0x000000e5
	...
  38:	000000e7 	.word	0x000000e7
  3c:	000001d5 	.word	0x000001d5
  40:	000000eb 	.word	0x000000eb
  44:	000000eb 	.word	0x000000eb
  48:	000000eb 	.word	0x000000eb
  4c:	000000eb 	.word	0x000000eb
  50:	000000eb 	.word	0x000000eb
  54:	000000eb 	.word	0x000000eb
  58:	000000eb 	.word	0x000000eb
  5c:	000000eb 	.word	0x000000eb
  60:	000000eb 	.word	0x000000eb
  64:	000000eb 	.word	0x000000eb
  68:	000000eb 	.word	0x000000eb
  6c:	000000eb 	.word	0x000000eb
  70:	000000eb 	.word	0x000000eb
  74:	000000eb 	.word	0x000000eb
  78:	000000eb 	.word	0x000000eb
  7c:	000000eb 	.word	0x000000eb
  80:	000000eb 	.word	0x000000eb
  84:	000000eb 	.word	0x000000eb
  88:	000000eb 	.word	0x000000eb
  8c:	000000eb 	.word	0x000000eb
  90:	000000eb 	.word	0x000000eb
  94:	000000eb 	.word	0x000000eb
	...
  a0:	000000eb 	.word	0x000000eb
  a4:	000000eb 	.word	0x000000eb
  a8:	000000eb 	.word	0x000000eb
  ac:	00000000 	.word	0x00000000
  b0:	000000eb 	.word	0x000000eb
  b4:	000000eb 	.word	0x000000eb
  b8:	000000eb 	.word	0x000000eb
  bc:	000000eb 	.word	0x000000eb

000000c0 <Reset_Handler>:
 *    __bss_start__: start of the BSS section.
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
    ldr r1, =__bss_start__
  c0:	4905      	ldr	r1, [pc, #20]	; (d8 <Reset_Handler+0x18>)
    ldr r2, =__bss_end__
  c2:	4a06      	ldr	r2, [pc, #24]	; (dc <Reset_Handler+0x1c>)

    movs    r0, #0
  c4:	2000      	movs	r0, #0

    sub    r2, r1
  c6:	1a52      	subs	r2, r2, r1
    ble .L_loop3_done
  c8:	dd02      	ble.n	d0 <Reset_Handler+0x10>

.L_loop3:
    sub    r2, #4
  ca:	3a04      	subs	r2, #4
    str r0, [r1, r2]
  cc:	5088      	str	r0, [r1, r2]
    bgt .L_loop3
  ce:	dcfc      	bgt.n	ca <Reset_Handler+0xa>
.L_loop3_done:
#endif /* __STARTUP_CLEAR_BSS */


#ifndef __NO_SYSTEM_INIT
    bl  SystemInit
  d0:	f000 f8ec 	bl	2ac <SystemInit>
#endif

#ifndef __START
#define __START _start
#endif
    bl  __START
  d4:	f000 f886 	bl	1e4 <main>
    ldr r1, =__bss_start__
  d8:	10000104 	.word	0x10000104
    ldr r2, =__bss_end__
  dc:	10000108 	.word	0x10000108

000000e0 <NMI_Handler>:
/* Exception Handlers */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
  e0:	e7fe      	b.n	e0 <NMI_Handler>

000000e2 <HardFault_Handler>:
    .size   NMI_Handler, . - NMI_Handler

    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
  e2:	e7fe      	b.n	e2 <HardFault_Handler>

000000e4 <SVC_Handler>:
    .size   HardFault_Handler, . - HardFault_Handler

    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
  e4:	e7fe      	b.n	e4 <SVC_Handler>

000000e6 <PendSV_Handler>:
    .size   SVC_Handler, . - SVC_Handler

    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
  e6:	e7fe      	b.n	e6 <PendSV_Handler>
    .size   PendSV_Handler, . - PendSV_Handler

    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
  e8:	e7fe      	b.n	e8 <PendSV_Handler+0x2>

000000ea <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
  ea:	e7fe      	b.n	ea <Default_Handler>

000000ec <SystemCoreClockUpdate>:
 ****************************************************************************/

/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
  ec:	b510      	push	{r4, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetSystemClockRate();
  ee:	f000 f867 	bl	1c0 <Chip_Clock_GetSystemClockRate>
  f2:	4b01      	ldr	r3, [pc, #4]	; (f8 <SystemCoreClockUpdate+0xc>)
  f4:	6018      	str	r0, [r3, #0]
}
  f6:	bd10      	pop	{r4, pc}
  f8:	10000100 	.word	0x10000100

000000fc <Chip_GPIO_Init>:
 * @param	clk	: Clock to enable
 * @return	Nothing
 */
STATIC INLINE void Chip_Clock_EnablePeriphClock(CHIP_SYSCTL_CLOCK_T clk)
{
	LPC_SYSCTL->SYSAHBCLKCTRL |= (1 << clk);
  fc:	2280      	movs	r2, #128	; 0x80
  fe:	2040      	movs	r0, #64	; 0x40
 100:	4902      	ldr	r1, [pc, #8]	; (10c <Chip_GPIO_Init+0x10>)
 102:	588b      	ldr	r3, [r1, r2]
 104:	4303      	orrs	r3, r0
 106:	508b      	str	r3, [r1, r2]
/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
	UNUSED(pGPIO);
	Chip_Clock_EnablePeriphClock(SYSCTL_CLOCK_GPIO);
}
 108:	4770      	bx	lr
 10a:	46c0      	nop			; (mov r8, r8)
 10c:	40048000 	.word	0x40048000

00000110 <Chip_GPIO_WriteDirBit>:

/* Set GPIO direction */
void Chip_GPIO_WriteDirBit(LPC_GPIO_T *pGPIO, uint32_t port, uint8_t bit, bool setting)
{
	if (setting) {
		pGPIO[port].DIR |= 1UL << bit;
 110:	0409      	lsls	r1, r1, #16
{
 112:	b510      	push	{r4, lr}
		pGPIO[port].DIR |= 1UL << bit;
 114:	1840      	adds	r0, r0, r1
	if (setting) {
 116:	2b00      	cmp	r3, #0
 118:	d107      	bne.n	12a <Chip_GPIO_WriteDirBit+0x1a>
	}
	else {
		pGPIO[port].DIR &= ~(1UL << bit);
 11a:	2101      	movs	r1, #1
 11c:	2480      	movs	r4, #128	; 0x80
 11e:	4091      	lsls	r1, r2
 120:	0224      	lsls	r4, r4, #8
 122:	5903      	ldr	r3, [r0, r4]
 124:	438b      	bics	r3, r1
 126:	5103      	str	r3, [r0, r4]
	}
}
 128:	bd10      	pop	{r4, pc}
		pGPIO[port].DIR |= 1UL << bit;
 12a:	2301      	movs	r3, #1
 12c:	2180      	movs	r1, #128	; 0x80
 12e:	4093      	lsls	r3, r2
 130:	0209      	lsls	r1, r1, #8
 132:	5844      	ldr	r4, [r0, r1]
 134:	4323      	orrs	r3, r4
 136:	5043      	str	r3, [r0, r1]
 138:	e7f6      	b.n	128 <Chip_GPIO_WriteDirBit+0x18>
 13a:	46c0      	nop			; (mov r8, r8)

0000013c <Chip_Clock_GetMainClockRate>:
/* Return main clock rate */
uint32_t Chip_Clock_GetMainClockRate(void)
{
	uint32_t clkRate = 0;

	switch ((CHIP_SYSCTL_MAINCLKSRC_T) (LPC_SYSCTL->MAINCLKSEL & 0x3)) {
 13c:	2103      	movs	r1, #3
{
 13e:	b500      	push	{lr}
	switch ((CHIP_SYSCTL_MAINCLKSRC_T) (LPC_SYSCTL->MAINCLKSEL & 0x3)) {
 140:	4a1b      	ldr	r2, [pc, #108]	; (1b0 <Chip_Clock_GetMainClockRate+0x74>)
{
 142:	b083      	sub	sp, #12
	switch ((CHIP_SYSCTL_MAINCLKSRC_T) (LPC_SYSCTL->MAINCLKSEL & 0x3)) {
 144:	6f13      	ldr	r3, [r2, #112]	; 0x70
 146:	400b      	ands	r3, r1
 148:	2b02      	cmp	r3, #2
 14a:	d01c      	beq.n	186 <Chip_Clock_GetMainClockRate+0x4a>
 14c:	2b03      	cmp	r3, #3
 14e:	d00c      	beq.n	16a <Chip_Clock_GetMainClockRate+0x2e>
 150:	2b01      	cmp	r3, #1
 152:	d002      	beq.n	15a <Chip_Clock_GetMainClockRate+0x1e>
	case SYSCTL_MAINCLKSRC_IRC:
		clkRate = Chip_Clock_GetIntOscRate();
 154:	4817      	ldr	r0, [pc, #92]	; (1b4 <Chip_Clock_GetMainClockRate+0x78>)
		clkRate = Chip_Clock_GetSystemPLLOutClockRate();
		break;
	}

	return clkRate;
}
 156:	b003      	add	sp, #12
 158:	bd00      	pop	{pc}
	switch ((CHIP_SYSCTL_PLLCLKSRC_T) (LPC_SYSCTL->SYSPLLCLKSEL & 0x3)) {
 15a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 15c:	4019      	ands	r1, r3
 15e:	d0f9      	beq.n	154 <Chip_Clock_GetMainClockRate+0x18>
 160:	2901      	cmp	r1, #1
 162:	d123      	bne.n	1ac <Chip_Clock_GetMainClockRate+0x70>
 * @brief	Returns the main oscillator clock rate
 * @return	main oscillator clock rate
 */
STATIC INLINE uint32_t Chip_Clock_GetMainOscRate(void)
{
	return OscRateIn;
 164:	4b14      	ldr	r3, [pc, #80]	; (1b8 <Chip_Clock_GetMainClockRate+0x7c>)
 166:	6818      	ldr	r0, [r3, #0]
 168:	e7f5      	b.n	156 <Chip_Clock_GetMainClockRate+0x1a>
	return Chip_Clock_GetPLLFreq(LPC_SYSCTL->SYSPLLCTRL,
 16a:	6891      	ldr	r1, [r2, #8]
	switch ((CHIP_SYSCTL_PLLCLKSRC_T) (LPC_SYSCTL->SYSPLLCLKSEL & 0x3)) {
 16c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 16e:	4013      	ands	r3, r2
 170:	d016      	beq.n	1a0 <Chip_Clock_GetMainClockRate+0x64>
 172:	2b01      	cmp	r3, #1
 174:	d11a      	bne.n	1ac <Chip_Clock_GetMainClockRate+0x70>
 176:	201f      	movs	r0, #31
 178:	4b0f      	ldr	r3, [pc, #60]	; (1b8 <Chip_Clock_GetMainClockRate+0x7c>)
 17a:	4008      	ands	r0, r1
 17c:	681b      	ldr	r3, [r3, #0]
 17e:	3001      	adds	r0, #1
 180:	9301      	str	r3, [sp, #4]
 182:	4358      	muls	r0, r3
 184:	e7e7      	b.n	156 <Chip_Clock_GetMainClockRate+0x1a>
	div = reg & 0x1F;
 186:	211f      	movs	r1, #31
	return Chip_Clock_GetWDTLFORate(LPC_SYSCTL->WDTOSCCTRL);
 188:	6a52      	ldr	r2, [r2, #36]	; 0x24
	clk = (CHIP_WDTLFO_OSC_T) ((reg >> 5) & 0xF);
 18a:	05d3      	lsls	r3, r2, #23
	div = reg & 0x1F;
 18c:	4011      	ands	r1, r2
	return wdtOSCRate[clk] / ((div + 1) << 1);
 18e:	0f1b      	lsrs	r3, r3, #28
 190:	4a0a      	ldr	r2, [pc, #40]	; (1bc <Chip_Clock_GetMainClockRate+0x80>)
 192:	009b      	lsls	r3, r3, #2
 194:	3101      	adds	r1, #1
 196:	0049      	lsls	r1, r1, #1
 198:	5898      	ldr	r0, [r3, r2]
 19a:	f000 f8cd 	bl	338 <__udivsi3>
		break;
 19e:	e7da      	b.n	156 <Chip_Clock_GetMainClockRate+0x1a>
 1a0:	231f      	movs	r3, #31
 1a2:	4804      	ldr	r0, [pc, #16]	; (1b4 <Chip_Clock_GetMainClockRate+0x78>)
 1a4:	400b      	ands	r3, r1
 1a6:	3301      	adds	r3, #1
 1a8:	4358      	muls	r0, r3
 1aa:	e7d4      	b.n	156 <Chip_Clock_GetMainClockRate+0x1a>
		clkRate = 0;
 1ac:	2000      	movs	r0, #0
	return clkRate;
 1ae:	e7d2      	b.n	156 <Chip_Clock_GetMainClockRate+0x1a>
 1b0:	40048000 	.word	0x40048000
 1b4:	00b71b00 	.word	0x00b71b00
 1b8:	00000490 	.word	0x00000490
 1bc:	00000450 	.word	0x00000450

000001c0 <Chip_Clock_GetSystemClockRate>:

/* Return system clock rate */
uint32_t Chip_Clock_GetSystemClockRate(void)
{
 1c0:	b510      	push	{r4, lr}
	/* No point in checking for divide by 0 */
	return Chip_Clock_GetMainClockRate() / LPC_SYSCTL->SYSAHBCLKDIV;
 1c2:	f7ff ffbb 	bl	13c <Chip_Clock_GetMainClockRate>
 1c6:	4b02      	ldr	r3, [pc, #8]	; (1d0 <Chip_Clock_GetSystemClockRate+0x10>)
 1c8:	6f99      	ldr	r1, [r3, #120]	; 0x78
 1ca:	f000 f8b5 	bl	338 <__udivsi3>
}
 1ce:	bd10      	pop	{r4, pc}
 1d0:	40048000 	.word	0x40048000

000001d4 <SysTick_Handler>:
#define LED3 2, 9

volatile uint32_t msTicks;

void SysTick_Handler(void) {
	msTicks++;
 1d4:	4a02      	ldr	r2, [pc, #8]	; (1e0 <SysTick_Handler+0xc>)
 1d6:	6813      	ldr	r3, [r2, #0]
 1d8:	3301      	adds	r3, #1
 1da:	6013      	str	r3, [r2, #0]
}
 1dc:	4770      	bx	lr
 1de:	46c0      	nop			; (mov r8, r8)
 1e0:	10000104 	.word	0x10000104

000001e4 <main>:

static void LED_Write(uint8_t port, uint8_t pin, uint8_t val) {
	Chip_GPIO_SetPinState(LPC_GPIO, port, pin, val);
}

int main (void) {
 1e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 1e6:	46c6      	mov	lr, r8
 1e8:	b500      	push	{lr}

	SystemCoreClockUpdate();
 1ea:	f7ff ff7f 	bl	ec <SystemCoreClockUpdate>

	if (SysTick_Config (SystemCoreClock / 1000)) {
 1ee:	21fa      	movs	r1, #250	; 0xfa
 1f0:	4b28      	ldr	r3, [pc, #160]	; (294 <Stack_Size+0x94>)
 1f2:	0089      	lsls	r1, r1, #2
 1f4:	6818      	ldr	r0, [r3, #0]
 1f6:	f000 f89f 	bl	338 <__udivsi3>
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 1fa:	21c0      	movs	r1, #192	; 0xc0
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 1fc:	4a26      	ldr	r2, [pc, #152]	; (298 <Stack_Size+0x98>)
 1fe:	3801      	subs	r0, #1
 200:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 202:	4826      	ldr	r0, [pc, #152]	; (29c <Stack_Size+0x9c>)
 204:	0609      	lsls	r1, r1, #24
 206:	6a03      	ldr	r3, [r0, #32]
	Chip_GPIO_WriteDirBit(LPC_GPIO, port, pin, true);
 208:	27a0      	movs	r7, #160	; 0xa0
 20a:	021b      	lsls	r3, r3, #8
 20c:	0a1b      	lsrs	r3, r3, #8
 20e:	430b      	orrs	r3, r1
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 210:	2400      	movs	r4, #0
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 212:	6203      	str	r3, [r0, #32]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 214:	2307      	movs	r3, #7
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO[port].DATA[1 << pin] = setting << pin;
 216:	2580      	movs	r5, #128	; 0x80
 218:	2680      	movs	r6, #128	; 0x80
 21a:	05ff      	lsls	r7, r7, #23
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 21c:	6094      	str	r4, [r2, #8]
 21e:	0038      	movs	r0, r7
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 220:	6013      	str	r3, [r2, #0]
 222:	2102      	movs	r1, #2
 224:	3b06      	subs	r3, #6
 226:	2208      	movs	r2, #8
 228:	f7ff ff72 	bl	110 <Chip_GPIO_WriteDirBit>
 22c:	4b1c      	ldr	r3, [pc, #112]	; (2a0 <Stack_Size+0xa0>)
 22e:	00ed      	lsls	r5, r5, #3
 230:	4698      	mov	r8, r3
 232:	515c      	str	r4, [r3, r5]
 234:	0038      	movs	r0, r7
 236:	2301      	movs	r3, #1
 238:	2206      	movs	r2, #6
 23a:	2100      	movs	r1, #0
 23c:	0076      	lsls	r6, r6, #1
 23e:	f7ff ff67 	bl	110 <Chip_GPIO_WriteDirBit>
 242:	51bc      	str	r4, [r7, r6]
 244:	0038      	movs	r0, r7
 246:	2301      	movs	r3, #1
 248:	2207      	movs	r2, #7
 24a:	2100      	movs	r1, #0
 24c:	f7ff ff60 	bl	110 <Chip_GPIO_WriteDirBit>
 250:	2380      	movs	r3, #128	; 0x80
 252:	009b      	lsls	r3, r3, #2
 254:	50fc      	str	r4, [r7, r3]
 256:	2102      	movs	r1, #2
 258:	0038      	movs	r0, r7
 25a:	2301      	movs	r3, #1
 25c:	2209      	movs	r2, #9
 25e:	f7ff ff57 	bl	110 <Chip_GPIO_WriteDirBit>
 262:	2380      	movs	r3, #128	; 0x80
 264:	4642      	mov	r2, r8
 266:	011b      	lsls	r3, r3, #4
 268:	50d4      	str	r4, [r2, r3]
	Chip_GPIO_Init(LPC_GPIO);
 26a:	0038      	movs	r0, r7
 26c:	4644      	mov	r4, r8
 26e:	2700      	movs	r7, #0
 270:	f7ff ff44 	bl	fc <Chip_GPIO_Init>
 274:	4a0b      	ldr	r2, [pc, #44]	; (2a4 <Stack_Size+0xa4>)
    while(diff < dlyTicks){
 276:	490c      	ldr	r1, [pc, #48]	; (2a8 <Stack_Size+0xa8>)
 278:	5166      	str	r6, [r4, r5]
    uint32_t startTime = msTicks;
 27a:	6810      	ldr	r0, [r2, #0]
        diff = msTicks - startTime;
 27c:	6813      	ldr	r3, [r2, #0]
 27e:	1a1b      	subs	r3, r3, r0
    while(diff < dlyTicks){
 280:	428b      	cmp	r3, r1
 282:	d9fb      	bls.n	27c <Stack_Size+0x7c>
 284:	5167      	str	r7, [r4, r5]
    uint32_t startTime = msTicks;
 286:	6810      	ldr	r0, [r2, #0]
        diff = msTicks - startTime;
 288:	6813      	ldr	r3, [r2, #0]
 28a:	1a1b      	subs	r3, r3, r0
    while(diff < dlyTicks){
 28c:	428b      	cmp	r3, r1
 28e:	d9fb      	bls.n	288 <Stack_Size+0x88>
 290:	e7f2      	b.n	278 <Stack_Size+0x78>
 292:	46c0      	nop			; (mov r8, r8)
 294:	10000100 	.word	0x10000100
 298:	e000e010 	.word	0xe000e010
 29c:	e000ed00 	.word	0xe000ed00
 2a0:	50020000 	.word	0x50020000
 2a4:	10000104 	.word	0x10000104
 2a8:	000003e7 	.word	0x000003e7

000002ac <SystemInit>:
#if (CLOCK_SETUP)                                 /* Clock Setup              */
#if (SYSCLK_SETUP)                                /* System Clock Setup       */
#if (SYSOSC_SETUP)                                /* System Oscillator Setup  */
  uint32_t i;

  LPC_SYSCTL->PDRUNCFG     &= ~(1 << 5);          /* Power-up System Osc      */
 2ac:	218e      	movs	r1, #142	; 0x8e
 2ae:	2020      	movs	r0, #32
 2b0:	4b1f      	ldr	r3, [pc, #124]	; (330 <SystemInit+0x84>)
 2b2:	0089      	lsls	r1, r1, #2
 2b4:	585a      	ldr	r2, [r3, r1]
{
 2b6:	b510      	push	{r4, lr}
  LPC_SYSCTL->PDRUNCFG     &= ~(1 << 5);          /* Power-up System Osc      */
 2b8:	4382      	bics	r2, r0
 2ba:	505a      	str	r2, [r3, r1]
  LPC_SYSCTL->SYSOSCCTRL    = SYSOSCCTRL_Val;
 2bc:	2200      	movs	r2, #0
 2be:	621a      	str	r2, [r3, #32]
 2c0:	23c8      	movs	r3, #200	; 0xc8

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 2c2:	46c0      	nop			; (mov r8, r8)
 2c4:	3b01      	subs	r3, #1
  for (i = 0; i < 200; i++) __NOP();
 2c6:	2b00      	cmp	r3, #0
 2c8:	d1fb      	bne.n	2c2 <SystemInit+0x16>
  LPC_SYSCTL->SYSPLLCLKSEL  = SYSPLLCLKSEL_Val;   /* Select PLL Input         */
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x1;               /* Update Clock Source      */
 2ca:	2101      	movs	r1, #1
  LPC_SYSCTL->SYSPLLCLKSEL  = SYSPLLCLKSEL_Val;   /* Select PLL Input         */
 2cc:	4a18      	ldr	r2, [pc, #96]	; (330 <SystemInit+0x84>)
 2ce:	6413      	str	r3, [r2, #64]	; 0x40
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x1;               /* Update Clock Source      */
 2d0:	6451      	str	r1, [r2, #68]	; 0x44
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x0;               /* Toggle Update Register   */
 2d2:	6453      	str	r3, [r2, #68]	; 0x44
  LPC_SYSCTL->SYSPLLCLKUEN  = 0x1;
 2d4:	6451      	str	r1, [r2, #68]	; 0x44
  while (!(LPC_SYSCTL->SYSPLLCLKUEN & 0x1));     /* Wait Until Updated       */
 2d6:	6c53      	ldr	r3, [r2, #68]	; 0x44
 2d8:	4219      	tst	r1, r3
 2da:	d0fc      	beq.n	2d6 <SystemInit+0x2a>
#if (SYSPLL_SETUP)                                /* System PLL Setup         */
  LPC_SYSCTL->SYSPLLCTRL    = SYSPLLCTRL_Val;
 2dc:	2323      	movs	r3, #35	; 0x23
  LPC_SYSCTL->PDRUNCFG     &= ~(1 << 7);          /* Power-up SYSPLL          */
 2de:	218e      	movs	r1, #142	; 0x8e
 2e0:	2080      	movs	r0, #128	; 0x80
  LPC_SYSCTL->SYSPLLCTRL    = SYSPLLCTRL_Val;
 2e2:	6093      	str	r3, [r2, #8]
  LPC_SYSCTL->PDRUNCFG     &= ~(1 << 7);          /* Power-up SYSPLL          */
 2e4:	0089      	lsls	r1, r1, #2
 2e6:	5853      	ldr	r3, [r2, r1]
 2e8:	4383      	bics	r3, r0
 2ea:	5053      	str	r3, [r2, r1]
  while (!(LPC_SYSCTL->SYSPLLSTAT & 0x1));	      /* Wait Until PLL Locked    */
 2ec:	2101      	movs	r1, #1
 2ee:	4a10      	ldr	r2, [pc, #64]	; (330 <SystemInit+0x84>)
 2f0:	68d3      	ldr	r3, [r2, #12]
 2f2:	4219      	tst	r1, r3
 2f4:	d0fc      	beq.n	2f0 <SystemInit+0x44>
  LPC_SYSCTL->WDTOSCCTRL    = WDTOSCCTRL_Val;
  LPC_SYSCTL->PDRUNCFG     &= ~(1 << 6);          /* Power-up WDT Clock       */
#endif
  LPC_SYSCTL->MAINCLKSEL    = MAINCLKSEL_Val;     /* Select PLL Clock Output  */
  LPC_SYSCTL->MAINCLKUEN    = 0x1;               /* Update MCLK Clock Source */
  LPC_SYSCTL->MAINCLKUEN    = 0x0;               /* Toggle Update Register   */
 2f6:	2300      	movs	r3, #0
  LPC_SYSCTL->MAINCLKSEL    = MAINCLKSEL_Val;     /* Select PLL Clock Output  */
 2f8:	6711      	str	r1, [r2, #112]	; 0x70
  LPC_SYSCTL->MAINCLKUEN    = 0x1;               /* Update MCLK Clock Source */
 2fa:	6751      	str	r1, [r2, #116]	; 0x74
  LPC_SYSCTL->MAINCLKUEN    = 0x0;               /* Toggle Update Register   */
 2fc:	6753      	str	r3, [r2, #116]	; 0x74
  LPC_SYSCTL->MAINCLKUEN    = 0x1;
 2fe:	6751      	str	r1, [r2, #116]	; 0x74
  while (!(LPC_SYSCTL->MAINCLKUEN & 0x1));       /* Wait Until Updated       */
 300:	2101      	movs	r1, #1
 302:	4a0b      	ldr	r2, [pc, #44]	; (330 <SystemInit+0x84>)
 304:	6f53      	ldr	r3, [r2, #116]	; 0x74
 306:	4219      	tst	r1, r3
 308:	d0fc      	beq.n	304 <SystemInit+0x58>
#endif
  LPC_SYSCTL->PDRUNCFG     |=  (1 << 10);         /* Power-down USB PHY       */
 30a:	238e      	movs	r3, #142	; 0x8e
 30c:	2080      	movs	r0, #128	; 0x80
 30e:	009b      	lsls	r3, r3, #2
 310:	58d4      	ldr	r4, [r2, r3]
 312:	00c0      	lsls	r0, r0, #3
 314:	4320      	orrs	r0, r4
 316:	50d0      	str	r0, [r2, r3]
  LPC_SYSCTL->PDRUNCFG     |=  (1 <<  8);         /* Power-down USB PLL       */
 318:	2080      	movs	r0, #128	; 0x80
 31a:	58d4      	ldr	r4, [r2, r3]
 31c:	0040      	lsls	r0, r0, #1
 31e:	4320      	orrs	r0, r4
 320:	50d0      	str	r0, [r2, r3]

  LPC_SYSCTL->SYSAHBCLKDIV  = SYSAHBCLKDIV_Val;
 322:	6791      	str	r1, [r2, #120]	; 0x78
  LPC_SYSCTL->SYSAHBCLKCTRL = AHBCLKCTRL_Val;
 324:	3bb9      	subs	r3, #185	; 0xb9
 326:	4903      	ldr	r1, [pc, #12]	; (334 <SystemInit+0x88>)
 328:	3bff      	subs	r3, #255	; 0xff
 32a:	50d1      	str	r1, [r2, r3]
#endif

#if (MEMMAP_SETUP || MEMMAP_INIT)       /* Memory Mapping Setup               */
  LPC_SYSCTL->SYSMEMREMAP = SYSMEMREMAP_Val;
#endif
}
 32c:	bd10      	pop	{r4, pc}
 32e:	46c0      	nop			; (mov r8, r8)
 330:	40048000 	.word	0x40048000
 334:	0001005f 	.word	0x0001005f

00000338 <__udivsi3>:
 338:	2200      	movs	r2, #0
 33a:	0843      	lsrs	r3, r0, #1
 33c:	428b      	cmp	r3, r1
 33e:	d374      	bcc.n	42a <__udivsi3+0xf2>
 340:	0903      	lsrs	r3, r0, #4
 342:	428b      	cmp	r3, r1
 344:	d35f      	bcc.n	406 <__udivsi3+0xce>
 346:	0a03      	lsrs	r3, r0, #8
 348:	428b      	cmp	r3, r1
 34a:	d344      	bcc.n	3d6 <__udivsi3+0x9e>
 34c:	0b03      	lsrs	r3, r0, #12
 34e:	428b      	cmp	r3, r1
 350:	d328      	bcc.n	3a4 <__udivsi3+0x6c>
 352:	0c03      	lsrs	r3, r0, #16
 354:	428b      	cmp	r3, r1
 356:	d30d      	bcc.n	374 <__udivsi3+0x3c>
 358:	22ff      	movs	r2, #255	; 0xff
 35a:	0209      	lsls	r1, r1, #8
 35c:	ba12      	rev	r2, r2
 35e:	0c03      	lsrs	r3, r0, #16
 360:	428b      	cmp	r3, r1
 362:	d302      	bcc.n	36a <__udivsi3+0x32>
 364:	1212      	asrs	r2, r2, #8
 366:	0209      	lsls	r1, r1, #8
 368:	d065      	beq.n	436 <__udivsi3+0xfe>
 36a:	0b03      	lsrs	r3, r0, #12
 36c:	428b      	cmp	r3, r1
 36e:	d319      	bcc.n	3a4 <__udivsi3+0x6c>
 370:	e000      	b.n	374 <__udivsi3+0x3c>
 372:	0a09      	lsrs	r1, r1, #8
 374:	0bc3      	lsrs	r3, r0, #15
 376:	428b      	cmp	r3, r1
 378:	d301      	bcc.n	37e <__udivsi3+0x46>
 37a:	03cb      	lsls	r3, r1, #15
 37c:	1ac0      	subs	r0, r0, r3
 37e:	4152      	adcs	r2, r2
 380:	0b83      	lsrs	r3, r0, #14
 382:	428b      	cmp	r3, r1
 384:	d301      	bcc.n	38a <__udivsi3+0x52>
 386:	038b      	lsls	r3, r1, #14
 388:	1ac0      	subs	r0, r0, r3
 38a:	4152      	adcs	r2, r2
 38c:	0b43      	lsrs	r3, r0, #13
 38e:	428b      	cmp	r3, r1
 390:	d301      	bcc.n	396 <__udivsi3+0x5e>
 392:	034b      	lsls	r3, r1, #13
 394:	1ac0      	subs	r0, r0, r3
 396:	4152      	adcs	r2, r2
 398:	0b03      	lsrs	r3, r0, #12
 39a:	428b      	cmp	r3, r1
 39c:	d301      	bcc.n	3a2 <__udivsi3+0x6a>
 39e:	030b      	lsls	r3, r1, #12
 3a0:	1ac0      	subs	r0, r0, r3
 3a2:	4152      	adcs	r2, r2
 3a4:	0ac3      	lsrs	r3, r0, #11
 3a6:	428b      	cmp	r3, r1
 3a8:	d301      	bcc.n	3ae <__udivsi3+0x76>
 3aa:	02cb      	lsls	r3, r1, #11
 3ac:	1ac0      	subs	r0, r0, r3
 3ae:	4152      	adcs	r2, r2
 3b0:	0a83      	lsrs	r3, r0, #10
 3b2:	428b      	cmp	r3, r1
 3b4:	d301      	bcc.n	3ba <__udivsi3+0x82>
 3b6:	028b      	lsls	r3, r1, #10
 3b8:	1ac0      	subs	r0, r0, r3
 3ba:	4152      	adcs	r2, r2
 3bc:	0a43      	lsrs	r3, r0, #9
 3be:	428b      	cmp	r3, r1
 3c0:	d301      	bcc.n	3c6 <__udivsi3+0x8e>
 3c2:	024b      	lsls	r3, r1, #9
 3c4:	1ac0      	subs	r0, r0, r3
 3c6:	4152      	adcs	r2, r2
 3c8:	0a03      	lsrs	r3, r0, #8
 3ca:	428b      	cmp	r3, r1
 3cc:	d301      	bcc.n	3d2 <__udivsi3+0x9a>
 3ce:	020b      	lsls	r3, r1, #8
 3d0:	1ac0      	subs	r0, r0, r3
 3d2:	4152      	adcs	r2, r2
 3d4:	d2cd      	bcs.n	372 <__udivsi3+0x3a>
 3d6:	09c3      	lsrs	r3, r0, #7
 3d8:	428b      	cmp	r3, r1
 3da:	d301      	bcc.n	3e0 <__udivsi3+0xa8>
 3dc:	01cb      	lsls	r3, r1, #7
 3de:	1ac0      	subs	r0, r0, r3
 3e0:	4152      	adcs	r2, r2
 3e2:	0983      	lsrs	r3, r0, #6
 3e4:	428b      	cmp	r3, r1
 3e6:	d301      	bcc.n	3ec <__udivsi3+0xb4>
 3e8:	018b      	lsls	r3, r1, #6
 3ea:	1ac0      	subs	r0, r0, r3
 3ec:	4152      	adcs	r2, r2
 3ee:	0943      	lsrs	r3, r0, #5
 3f0:	428b      	cmp	r3, r1
 3f2:	d301      	bcc.n	3f8 <__udivsi3+0xc0>
 3f4:	014b      	lsls	r3, r1, #5
 3f6:	1ac0      	subs	r0, r0, r3
 3f8:	4152      	adcs	r2, r2
 3fa:	0903      	lsrs	r3, r0, #4
 3fc:	428b      	cmp	r3, r1
 3fe:	d301      	bcc.n	404 <__udivsi3+0xcc>
 400:	010b      	lsls	r3, r1, #4
 402:	1ac0      	subs	r0, r0, r3
 404:	4152      	adcs	r2, r2
 406:	08c3      	lsrs	r3, r0, #3
 408:	428b      	cmp	r3, r1
 40a:	d301      	bcc.n	410 <__udivsi3+0xd8>
 40c:	00cb      	lsls	r3, r1, #3
 40e:	1ac0      	subs	r0, r0, r3
 410:	4152      	adcs	r2, r2
 412:	0883      	lsrs	r3, r0, #2
 414:	428b      	cmp	r3, r1
 416:	d301      	bcc.n	41c <__udivsi3+0xe4>
 418:	008b      	lsls	r3, r1, #2
 41a:	1ac0      	subs	r0, r0, r3
 41c:	4152      	adcs	r2, r2
 41e:	0843      	lsrs	r3, r0, #1
 420:	428b      	cmp	r3, r1
 422:	d301      	bcc.n	428 <__udivsi3+0xf0>
 424:	004b      	lsls	r3, r1, #1
 426:	1ac0      	subs	r0, r0, r3
 428:	4152      	adcs	r2, r2
 42a:	1a41      	subs	r1, r0, r1
 42c:	d200      	bcs.n	430 <__udivsi3+0xf8>
 42e:	4601      	mov	r1, r0
 430:	4152      	adcs	r2, r2
 432:	4610      	mov	r0, r2
 434:	4770      	bx	lr
 436:	e7ff      	b.n	438 <__udivsi3+0x100>
 438:	b501      	push	{r0, lr}
 43a:	2000      	movs	r0, #0
 43c:	f000 f806 	bl	44c <__aeabi_idiv0>
 440:	bd02      	pop	{r1, pc}
 442:	46c0      	nop			; (mov r8, r8)

00000444 <__aeabi_uidivmod>:
 444:	2900      	cmp	r1, #0
 446:	d0f7      	beq.n	438 <__udivsi3+0x100>
 448:	e776      	b.n	338 <__udivsi3>
 44a:	4770      	bx	lr

0000044c <__aeabi_idiv0>:
 44c:	4770      	bx	lr
 44e:	46c0      	nop			; (mov r8, r8)

00000450 <wdtOSCRate>:
 450:	0000 0000 27c0 0009 0590 0010 5cc0 0015     .....'.......\..
 460:	b3f0 001a 0b20 0020 9f00 0024 32e0 0029     .... . ...$..2).
 470:	c6c0 002d 9750 0031 67e0 0035 3870 0039     ..-.P.1..g5.p89.
 480:	0900 003d 1640 0040 2380 0043 30c0 0046     ..=.@.@..#C..0F.

00000490 <OscRateIn>:
 490:	1b00 00b7                                   ....
